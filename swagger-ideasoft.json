{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Ideasoft Api",
        "description": "Ideasoft Api Documentation",
        "termsOfService": "http:\/\/www.ideasoft.com.tr\/terms",
        "contact": {
            "name": "Ideasoft Api Team",
            "email": "techsupport@ideasoft.com.tr",
            "url": "http:\/\/www.ideasoft.com.tr\/destek"
        }
    },
    "host": "STORENAME.myideasoft.com",
    "basePath": "\/api",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application\/json"
    ],
    "produces": [
        "application\/json"
    ],
    "responses": {
        "200": {
            "description": "Http OK"
        },
        "201": {
            "description": "Created"
        },
        "204": {
            "description": "No Content"
        },
        "400": {
            "description": "Bad Request",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        },
        "401": {
            "description": "Unauthorized",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        },
        "403": {
            "description": "Forbidden",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        },
        "404": {
            "description": "Not Found",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        },
        "405": {
            "description": "Method Not Allowed",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        },
        "422": {
            "description": "Unprocessable Entity",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        },
        "429": {
            "description": "Too Many Requests",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        },
        "500": {
            "description": "Internal Server Error",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        },
        "503": {
            "description": "Service Unavailable",
            "schema": {
                "$ref": "#\/definitions\/Error"
            }
        }
    },
    "tags": [
        {
            "name": "BillingAddress",
            "description": "The mailing address associated with the payment method."
        },
        {
            "name": "Brand",
            "description": "Brand is a name to distinguish a group from the other products. An IdeaSoft store owner could specify the distributor preference for all, same branded, products by using 'distributorCode' and 'distributor' parameters. Also customers could be informed about the general properties by using 'showcaseContent'. In the same time Brand helps SEO optimizations via 'metaKeywords' and 'metaDescription' parameters."
        },
        {
            "name": "Cart",
            "description": "Cart is a virtual shopping basket in an IdeaSoft store. It works like a container which contains the cart items until the customer confirm or cancel the order. Also customer determines the chosenPromotion and chosenToken of the Order by using Cart."
        },
        {
            "name": "CartItem",
            "description": "CartItem represents the selected Products for ordering. Also in an IdeaSoft store the customer could control the quantity before confirming the Order."
        },
        {
            "name": "Category",
            "description": "Category represents a grouping of products that a shop owner can create to organize them or make their shops easier to browse."
        },
        {
            "name": "Currency",
            "description": "In an IdeaSoft store current currencies are finds voice under this title. All currencies are predefined. Shop owner could only modify the attributes of these currencies but could not create or delete a currency. Current currencies are: USD, EURO, TL, POUND, JPY, YUAN, GOLD, CHF."
        },
        {
            "name": "CurrentAccount",
            "description": "An IdeaSoft store owner could create a credit account for a selected member by using CurrentAccount. Also shop owner could limit his\/her credit by 'riskLimit' parameter and determine the balance."
        },
        {
            "name": "Distributor",
            "description": "An IdeaSoft store owner has an opportunity to define some extra distributors to specify the selected product's or brand's distributor. Under the distributor title the shop owner could create, delete or modify his\/her distributors."
        },
        {
            "name": "DistributorToProduct",
            "description": "DistributorToProduct determines the relationship between Distributor and Product."
        },
        {
            "name": "ExtraInfo",
            "description": "ExtraInfo is the sugar of a cup of tea. In other words, ExtraInfo is a flexible info\/attribute for each orderItem\/Product but it's independent from the Product's stock amount and price."
        },
        {
            "name": "ExtraInfoToProduct",
            "description": "ExtraInfoToProduct determines the relationship between ExtraInfo and Product. Also the shop owner determines the value of the extra info by using 'value' parameter. To give an example or illustration, if the Product is a cup of tea and the ExtraInfo is sugar, then the 'value' parameter of the ExtraInfoToProduct could be the amount of sugar."
        },
        {
            "name": "FavouritedProduct",
            "description": "FavouritedProduct helps the customer to find or follow a selected Product."
        },
        {
            "name": "InstallmentRate",
            "description": "An IdeaSoft store owner could determine the delay interest value for each paymentGateway's each installment option under this title."
        },
        {
            "name": "Location",
            "description": "Location's are predefined information of some cities. An IdeaSoft store owner could not create or modify a location by using IdeaSoft API."
        },
        {
            "name": "Maillist",
            "description": "Maillist saves the subscribed member's or quest's e-mailing addresses."
        },
        {
            "name": "MaillistGroup",
            "description": "MaillistGroup is a grouping tool for the subscribed e-mail addresses. Via that groups the shop owner can inform all customers, members, quests, etc. in a systematic way."
        },
        {
            "name": "Member",
            "description": "Member is the signed in customer. That signing operation has some advantages for both customer and shop owner. Customer could store his\/her information on IdeaSoft store's database to make his trading, searching, etc. operations easier. Also he\/she can gain some opportunities like shopToken or special discounts via this signing operation. On the other hand, the shop owner could build more healthy statistics or define some special offers for selected Members via this tool."
        },
        {
            "name": "MemberGroup",
            "description": "An IdeaSoft store owner could some offers for the memberGroups, like applying different pricing or allowing different paymentGateways."
        },
        {
            "name": "OptionGroup",
            "description": "OptionGroup is the title of a group of variants like 'colour'. The shop owner could group all colour selections under that title like 'red', 'blue', 'yellow', etc."
        },
        {
            "name": "OptionToProduct",
            "description": "OptionToProduct is a connection tool between Options\/variants and Products. IdeaSoft API builds that connection by this(OptionToProduct) external tool to create a flexibility for the shop owner. Via this tool he\/she could use the same Options for completely different Products. For example, he\/she could connect the 'red' option with 'car' and 't-shirt' in the same time."
        },
        {
            "name": "Options",
            "description": "Option\/variant could be 'red' if the Product is 'car' and OptionGroup is 'colour'. All options has their own stock amount and cost. (Default values are same as the main product, for our example main product is 'car') A product could have more than one option group and an option group could have more than one option."
        },
        {
            "name": "Order",
            "description": "In a IdeaSoft store, from the orderItem to customer all information of an Order gather under this tool title. 'Order' includes every information which are necessary for an order, like 'OrderItem', 'OrderDetail', 'Member', 'shippingAddress', 'billingAddress' and so on. This containing\/combining property of Order tool lighten up the website, customer and shop owner. Because it makes the database entities reusable. This opportunity optimizes the database, makes easier the trading operations, with same information, for customer and also being helpful to make statistics for the shop owner."
        },
        {
            "name": "OrderDetail",
            "description": "OrderDetail is a transition table between detailed order information and the database of IdeaSoft store. Via this process avoids the information lost."
        },
        {
            "name": "OrderItem",
            "description": "OrderItem collects the necessary information of the ordered product and passes it to the Order by using Order's Id value."
        },
        {
            "name": "OrderRefundRequest",
            "description": "OrderRefundRequest keeps the general information of a refund request. Pulls the detailed information\/data of the refund requested Member and Order from their prebuilt entities via their id value."
        },
        {
            "name": "OrderRefundRequestItem",
            "description": "OrderRefundRequestItem keeps specific information, like amount and reason, and pulls the detailed ordered item's information by using id value of orderItem. Also it pushes all of these information to the orderRefundRequest via it's id value."
        },
        {
            "name": "OrderUserNote",
            "description": "An IdeaSoft store customer could create some notes about his\/her order to inform the shop owner for the extra situations about the Order, via OrderUserNote tool. This tool keeps the note string by name of the user and it binds the associated order with this provided information."
        },
        {
            "name": "Payment",
            "description": "All information about a Payment gather under this tool title. The shop owner can reach and manage this information via Payment tool of IdeaSoft API."
        },
        {
            "name": "PaymentGateway",
            "description": "IdeaSoft API has twenty given PaymentGateway. The shop owner has no authority on adding a new PaymentGateway but one of the given gateways, is editable on admin panel. From API there is no PUT or POST action. Also this tool pulls the provider data from PaymentProvider Id value."
        },
        {
            "name": "PaymentProvider",
            "description": "IdeaSoft API has twenty given PaymentProvider. The shop owner has no authority on adding a new PaymentProvider but one of the given providers, is editable on admin panel. From API there is no PUT or POST action."
        },
        {
            "name": "PreOrderInfo",
            "description": "PreOrderInfo is an intermediary data table which saves the original Order information to avoid data loss on the ordering process."
        },
        {
            "name": "Product",
            "description": "A product is an individual item for sale in an IdeaSoft store. Products are often physical, but they don't have to be. For example, a digital download (such as a movie, music or e-book file) also qualifies as a product, as do services (such as equipment rental, work for hire, customization of another product or an extended warranty). Simply put: if it's something for sale in a store, then it's a product. An IdeaSoft store owner could increase his\/her product's sales appeal by using the Product tool's parameters like 'gift' or 'discount'."
        },
        {
            "name": "ProductButton",
            "description": "ProductButton is the speciality favor of the Product which appears under the basic information of the Product. A Product could have two ProductButton\/favor at most. ProductButtons are not editable, the shop owner could only change their status (enable or disable)."
        },
        {
            "name": "ProductDetail",
            "description": "An IdeaSoft store owner could add some details (as a text) via ProductDetail tool."
        },
        {
            "name": "ProductImage",
            "description": "An IdeaSoft store owner could add some images for his\/her Product to increase it's sales appeal. A product could have eight images at most."
        },
        {
            "name": "ProductPrice",
            "description": "An IdeaSoft store owner could add five different price value for the same Product. That ability, makes possible to present different offers to different member groups."
        },
        {
            "name": "ProductProtection",
            "description": "An IdeaSoft store owner could lock the price value and\/or stock amount of a Product via ProductProtection tool."
        },
        {
            "name": "ProductSpecialInfo",
            "description": "An IdeaSoft store owner could add some extra details (as a text) via ProductDetail tool."
        },
        {
            "name": "ProductToCategory",
            "description": "ProductToCategory is a binding tool which binds the selected Product with the selected Category on the database. ProductToCategory tool uses the Id values for binding so both the associated product and category must be predefined to create this relationship. The relationship between Product and Category is 'many to many'. (A product could have more than one category also a category could have more than one product.)"
        },
        {
            "name": "ProductToCountDown",
            "description": "An IdeaSoft store owner could create a count down for a product via ProductToCountDown tool. It's both useful for expiring a product and expiring a discount."
        },
        {
            "name": "ProductToTag",
            "description": "ProductToTag is a binding tool which binds the selected Product with the selected Tag on the database. ProductToTag tool uses the Id values for binding so both the associated product and tag must be predefined to create this relationship. The relationship between Product and Tag is 'many to many'. (A product could have more than one tag also a tag could have more than one product.)"
        },
        {
            "name": "QuickCart",
            "description": "An IdeaShop store customer could save his\/her Cart as a URL via QuickCart tool. The customer could select to create a long\/full URL or a short URL."
        },
        {
            "name": "Region",
            "description": "Region is a predefined\/given data which includes seven regions in Turkey and as an extra, K\u0131br\u0131s included."
        },
        {
            "name": "Selection",
            "description": "Selection presents the selectable details for the product. The Selection values are multiple choice as distinct from ExtraInfo."
        },
        {
            "name": "SelectionGroup",
            "description": "SelectionGroup is title of the associated Selection."
        },
        {
            "name": "SelectionToProduct",
            "description": "SelectionToProduct is a binding tool which binds the selected Product with the selected Selection on the database. SelectionToProduct tool uses the Id values for binding so both the associated product and selection must be predefined to create this relationship. The relationship between Product and Selection is 'many to many'. (A product could have more than one selection also a selection could have more than one product.)"
        },
        {
            "name": "Shipment",
            "description": "Technical basic information of an Order's shipment such as 'cargoOffice', 'invoiceKey', 'wayBillNo', etc. gather under this title. Also this tool pulls the Order data from the selected Order."
        },
        {
            "name": "ShipmentItem",
            "description": "Technical basic information of an ShipmentItem such as tax value, price, amount, etc. gather under this title. Also this tool pulls the OrderItem, Product and Shipment data from the selected entities."
        },
        {
            "name": "ShippingAddress",
            "description": "The shipping address information presents under ShippingAddress title."
        },
        {
            "name": "ShippingCompany",
            "description": "An IdeaSoft store owner could create his\/her own ShippingCompany selection or he\/she could use one of the default ShippingCompany. Also the shop owner could define some special offers like 'freeShippingOrderPrice' for each shipping company."
        },
        {
            "name": "ShippingProvider",
            "description": "ShippingProviders are predefined\/given in IdeaSoft API. The shop owner cannot create or modify any ShippingProvider. But the owner could create or modify a ShippingCompany and bind it with a predefined ShippingProvider."
        },
        {
            "name": "ShippingRate",
            "description": "ShippingRate is the extra cost of an order for the given shipping situations. (volumetricWeight, region and shipping company) An IdeaSoft store owner could define different shipping rates for each region and each shipping company. For example: for X shipping company, the shipping rate can be 1.2 for the A region and at the same time for X shipping company, the shipping rate can be 1.4 for the B region. "
        },
        {
            "name": "ShopPreference",
            "description": "Preference is the general settings of the IdeaShop store such as 'company_name', 'company_phonenumber', 'company_email', etc. Also Preference includes the general running rules of the store such as 'site_status' (enable or disable), 'showcase_type', 'member_signup' (enable or disable), 'default_tax_rate', etc. These settings are not editable from API. The shop owner could modify\/edit these settings on admin panel."
        },
        {
            "name": "SpecGroup",
            "description": "SpecGroup is a grouping tool for SpecNames. It helps the shop owner to organize the specs."
        },
        {
            "name": "SpecName",
            "description": "SpecName is the special characteristic's name of the Product. It is shown under the 'Product Features' title in the Product page. All SpecNames needs a SpecGroup and at least a SpecValue."
        },
        {
            "name": "SpecToProduct",
            "description": "SpecToProduct is a binding tool which binds the selected Spec (SpecGroup, SpecName, SpecValue) with the selected Product on the database. SpecToProduct tool uses the Id values for binding so both the associated entities must be predefined to create this relationship. The relationship between Product and Spec is 'many to many'. (A product could have more than one spec also a spec could have more than one product.)"
        },
        {
            "name": "SpecValue",
            "description": "SpecValue is the special characteristic's value of the Product. It is shown under the 'Product Features' title in the Product page. All SpecValues needs a SpecName."
        },
        {
            "name": "Tag",
            "description": "Tag is a tool which helps user to find a specific product. The shop owner could create, modify, receive or delete the Tags via this tool and bind them with the Products via ProductToTag tool. If a user\/customer search something on the store page and a Product has binded with a related Tag, then this Product will appear at the top of the search results."
        },
        {
            "name": "Town",
            "description": "All saved Towns on the IdeaSoft store database have been presented under this title. There are several default Towns on database but the shop owner could modify, create and delete each Town."
        },
        {
            "name": "TownGroup",
            "description": "TownGroup is a grouping tool which helps to organize the Town entities."
        },
        {
            "name": "User",
            "description": "User is the admin of the IdeaShop Store. The shop owner could not modify, create or delete any User from IdeaSoft API but he\/she can modify, create or delete each User on admin panel."
        }
    ],
    "paths": {
        "\/spec_values": {
            "get": {
                "summary": "SpecValue cgetAction",
                "description": "Receive a list of all SpecValues.",
                "tags": [
                    "SpecValue"
                ],
                "responses": {
                    "200": {
                        "description": "SpecValue successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecValue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested SpecValues per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Spec Value Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "specName",
                        "description": "Spec Name Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "specValue",
                        "description": "Spec Value Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "SpecValue postAction",
                "description": "Creates a new SpecValue. Some valid information of a predefined specGroup and a specName, required for SpecValue postAction.",
                "tags": [
                    "SpecValue"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "SpecValue",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SpecValue"
                        },
                        "description": "SpecValue object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "SpecValue successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecValue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/spec_values\/{id}": {
            "put": {
                "summary": "SpecValue putAction",
                "description": "Update the selected SpecValue.",
                "tags": [
                    "SpecValue"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecValue"
                    },
                    {
                        "in": "body",
                        "name": "SpecValue",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SpecValue"
                        },
                        "description": "SpecValue object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SpecValue successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecValue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "SpecValue getAction",
                "description": "Receive the selected SpecValue.",
                "tags": [
                    "SpecValue"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecValue"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SpecValue successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecValue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "SpecValue deleteAction",
                "description": "Permanently delete the selected SpecValue.",
                "tags": [
                    "SpecValue"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecValue"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "SpecValue successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/orders": {
            "get": {
                "summary": "Order cgetAction",
                "description": "Receive a list of all Orders.",
                "tags": [
                    "Order"
                ],
                "responses": {
                    "200": {
                        "description": "Order successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction id.",
                        "minLength": 1,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "customerEmail",
                        "description": "Customer email.",
                        "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "member",
                        "description": "Member id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status can be waiting_for_approval, approved, fulfilled, cancelled, delivered, on_accumulation, waiting_for_payment, being_prepared, refunded, personal_status_1, personal_status_2, personal_status_3 or deleted",
                        "enum": [
                            "waiting_for_approval",
                            "approved",
                            "fulfilled",
                            "cancelled",
                            "delivered",
                            "on_accumulation",
                            "waiting_for_payment",
                            "being_prepared",
                            "refunded",
                            "personal_status_1",
                            "personal_status_2",
                            "personal_status_3",
                            "deleted"
                        ],
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "paymentStatus",
                        "description": "Payment status can be success, in_transaction or failed",
                        "enum": [
                            "success",
                            "in_transaction",
                            "failed"
                        ],
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "paymentTypeName",
                        "description": "Payment type name can be Havale, \u00d6zel \u00d6deme Sistemi, Kredi Kart\u0131, Paypal, GarantiPay, Mail Order, BKM Express, Kap\u0131da \u00d6deme Nakit or Kap\u0131da \u00d6deme Kredi Kart\u0131",
                        "enum": [
                            "Havale",
                            "\u00d6zel \u00d6deme Sistemi",
                            "Kredi Kart\u0131",
                            "Paypal",
                            "GarantiPay",
                            "Mail Order",
                            "BKM Express",
                            "Kap\u0131da \u00d6deme Nakit",
                            "Kap\u0131da \u00d6deme Kredi Kart\u0131"
                        ],
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "shippingProviderCode",
                        "description": "Shipping provider code can be yurtici, yurtici_sel_service, yurtici_api, ptt, mng, surat, ups, aras or other",
                        "enum": [
                            "yurtici",
                            "yurtici_self_service",
                            "yurtici_api",
                            "ptt",
                            "mng",
                            "surat",
                            "ups",
                            "aras",
                            "other"
                        ],
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Order postAction",
                "description": "Creates a new Order. Some valid information of a predefined paymentProvider, a paymentGateway, a shippingProvider, a shippingCompany, a Member, a shippingAddress, a billingAddress, an orderItems, required for Order postAction. Also if a Maillist and\/or OrderDetails exists, these entities must be predefined.",
                "tags": [
                    "Order"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Orders",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        },
                        "description": "Orders object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/orders\/{id}": {
            "put": {
                "summary": "Order putAction",
                "description": "Update the selected Order.",
                "tags": [
                    "Order"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Order"
                    },
                    {
                        "in": "body",
                        "name": "Orders",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        },
                        "description": "Orders object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Order getAction",
                "description": "Receive the selected Order.",
                "tags": [
                    "Order"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Order"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Order deleteAction",
                "description": "Permanently delete the selected Order.",
                "tags": [
                    "Order"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Order"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Order successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/orders\/combined": {
            "get": {
                "summary": "Order combinedAction",
                "description": "Receives the today, monthly, yearly and total order additions in terms of totalAmount, totalCount and currency.",
                "tags": [
                    "Order"
                ],
                "responses": {
                    "200": {
                        "description": "Order successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status can be waiting_for_approval, approved, fulfilled, cancelled, delivered, on_accumulation, waiting_for_payment, being_prepared, refunded, personal_status_1, personal_status_2 or personal_status_3",
                        "enum": [
                            "waiting_for_approval",
                            "approved",
                            "fulfilled",
                            "cancelled",
                            "delivered",
                            "on_accumulation",
                            "waiting_for_payment",
                            "being_prepared",
                            "refunded",
                            "personal_status_1",
                            "personal_status_2",
                            "personal_status_3"
                        ],
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/orders\/charts": {
            "get": {
                "summary": "Order chartsAction",
                "description": "Receives the general statistics of Orders in terms of time.",
                "tags": [
                    "Order"
                ],
                "responses": {
                    "200": {
                        "description": "Order successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "timeFrame",
                        "description": "Can be these values: full, year, month or week",
                        "pattern": "^full$|^year$|^month$|^week$",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "description": "Start of the time frame",
                        "pattern": "\\d{4}-[0-1]\\d-[0-2]\\d",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "\/orders\/cart\/{cartId}": {
            "post": {
                "summary": "Order preOrderAction",
                "description": "Creates a new preOrder for the selected Order. Some valid information of a predefined paymentProvider, a paymentGateway, a shippingProvider, a shippingCompany, a Member, a shippingAddress, a billingAddress, an orderItems, required for Order postAction. Also if a Maillist and\/or OrderDetails exists, these entities must be predefined. This method works like a backup system to save the data between the first step and the last step of the Order process.",
                "tags": [
                    "Order"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "cartId",
                        "type": "integer",
                        "required": true,
                        "description": "CartId value of Order"
                    },
                    {
                        "in": "body",
                        "name": "Orders",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        },
                        "description": "Orders object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_buttons": {
            "get": {
                "summary": "ProductButton cgetAction",
                "description": "Receive a list of all ProductButtons.",
                "tags": [
                    "ProductButton"
                ],
                "responses": {
                    "200": {
                        "description": "ProductButton successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductButton"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "fastShipping",
                        "description": "Which products has fastShipping",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sameDayShipping",
                        "description": "Which products has sameDayShipping",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "threeDaysDelivery",
                        "description": "Which products has threeDaysDelivery",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "fiveDaysDelivery",
                        "description": "Which products has fiveDaysDelivery",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sevenDaysDelivery",
                        "description": "Which products has sevenDaysDelivery",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "freeShipping",
                        "description": "Which products has freeShipping",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "deliveryFromStock",
                        "description": "Which products has deliveryFromStock",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "preOrderedProduct",
                        "description": "Which products has preOrderedProduct",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "askStock",
                        "description": "Which products has askStock",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "campaignedProduct",
                        "description": "Which products has campaignedProduct",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductButton postAction",
                "description": "Creates a new ProductButton. A valid Id of a predefined Product, required for ProductButton postAction.",
                "tags": [
                    "ProductButton"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductButton",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductButton"
                        },
                        "description": "ProductButton object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductButton successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductButton"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_buttons\/{id}": {
            "put": {
                "summary": "ProductButton putAction",
                "description": "Update the selected ProductButton.",
                "tags": [
                    "ProductButton"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductButton"
                    },
                    {
                        "in": "body",
                        "name": "ProductButton",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductButton"
                        },
                        "description": "ProductButton object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductButton successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductButton"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ProductButton getAction",
                "description": "Receive the selected ProductButton.",
                "tags": [
                    "ProductButton"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductButton"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductButton successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductButton"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductButton deleteAction",
                "description": "Permanently delete the selected ProductButton.",
                "tags": [
                    "ProductButton"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductButton"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductButton successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_prices": {
            "get": {
                "summary": "ProductPrice cgetAction",
                "description": "Receive a list of all ProductPrices.",
                "tags": [
                    "ProductPrice"
                ],
                "responses": {
                    "200": {
                        "description": "ProductPrice successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductPrice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "description": "Product PriceType",
                        "allowEmptyValue": false,
                        "type": "integer",
                        "minimum": 2,
                        "maximum": 5,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductPrice postAction",
                "description": "Creates a new ProductPrice. Some valid information of a predefined Product, required for ProductPrice postAction.",
                "tags": [
                    "ProductPrice"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductPrice",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductPrice"
                        },
                        "description": "ProductPrice object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductPrice successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductPrice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_prices\/{id}": {
            "put": {
                "summary": "ProductPrice putAction",
                "description": "Update the selected ProductPrice.",
                "tags": [
                    "ProductPrice"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductPrice"
                    },
                    {
                        "in": "body",
                        "name": "ProductPrice",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductPrice"
                        },
                        "description": "ProductPrice object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductPrice successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductPrice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ProductPrice getAction",
                "description": "Receive the selected ProductPrice.",
                "tags": [
                    "ProductPrice"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductPrice"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductPrice successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductPrice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductPrice deleteAction",
                "description": "Permanently delete the selected ProductPrice.",
                "tags": [
                    "ProductPrice"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductPrice"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductPrice successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/selections": {
            "get": {
                "summary": "Selection cgetAction",
                "description": "Receive a list of all Selections.",
                "tags": [
                    "Selection"
                ],
                "responses": {
                    "200": {
                        "description": "Selection successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Selection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Selections per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "title",
                        "description": "Selection Title.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "selectionGroup",
                        "description": "Selection Group Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Selection postAction",
                "description": "Creates a new Selection.",
                "tags": [
                    "Selection"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Selection",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Selection"
                        },
                        "description": "Selection object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Selection successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Selection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/selections\/{id}": {
            "put": {
                "summary": "Selection putAction",
                "description": "Update the selected Selection.",
                "tags": [
                    "Selection"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Selection"
                    },
                    {
                        "in": "body",
                        "name": "Selection",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Selection"
                        },
                        "description": "Selection object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Selection successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Selection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Selection getAction",
                "description": "Receive the selected Selection.",
                "tags": [
                    "Selection"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Selection"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Selection successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Selection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Selection deleteAction",
                "description": "Permanently delete the selected Selection.",
                "tags": [
                    "Selection"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Selection"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Selection successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/option_to_products": {
            "get": {
                "summary": "OptionToProduct cgetAction",
                "description": "Receive a list of all OptionToProducts.",
                "tags": [
                    "OptionToProduct"
                ],
                "responses": {
                    "200": {
                        "description": "OptionToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OptionToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested OptionToProducts per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "optionGroup",
                        "description": "Option group Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "option",
                        "description": "Option Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "parentProductId",
                        "description": "Parent product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "OptionToProduct postAction",
                "description": "Creates a new OptionToProduct relationship. Some valid information of a predefined Option and an OptionGroup and Product(only Id required) required for OptionToProduct postAction. Also if the Product has a parentProduct, the Id of parentProduct required.",
                "tags": [
                    "OptionToProduct"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "OptionToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OptionToProduct"
                        },
                        "description": "OptionToProduct object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OptionToProduct successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/OptionToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/option_to_products\/{id}": {
            "put": {
                "summary": "OptionToProduct putAction",
                "description": "Update the selected OptionToProduct.",
                "tags": [
                    "OptionToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OptionToProduct"
                    },
                    {
                        "in": "body",
                        "name": "OptionToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OptionToProduct"
                        },
                        "description": "OptionToProduct object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OptionToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OptionToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "OptionToProduct getAction",
                "description": "Receive the selected OptionToProduct relationship.",
                "tags": [
                    "OptionToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OptionToProduct"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OptionToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OptionToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "OptionToProduct deleteAction",
                "description": "Permanently delete the selected OptionToProduct relationship.",
                "tags": [
                    "OptionToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OptionToProduct"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OptionToProduct successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/member_groups": {
            "get": {
                "summary": "MemberGroup cgetAction",
                "description": "Receive a list of all MemberGroups.",
                "tags": [
                    "MemberGroup"
                ],
                "responses": {
                    "200": {
                        "description": "MemberGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/MemberGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested MemberGroups per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Member Group name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "MemberGroup postAction",
                "description": "Creates a new MemberGroup.",
                "tags": [
                    "MemberGroup"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "MemberGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/MemberGroup"
                        },
                        "description": "MemberGroup object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "MemberGroup successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/MemberGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/member_groups\/{id}": {
            "put": {
                "summary": "MemberGroup putAction",
                "description": "Update the selected MemberGroup.",
                "tags": [
                    "MemberGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of MemberGroup"
                    },
                    {
                        "in": "body",
                        "name": "MemberGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/MemberGroup"
                        },
                        "description": "MemberGroup object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MemberGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/MemberGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "MemberGroup getAction",
                "description": "Receive the selected MemberGroup.",
                "tags": [
                    "MemberGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of MemberGroup"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MemberGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/MemberGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "MemberGroup deleteAction",
                "description": "Permanently delete the selected MemberGroup.",
                "tags": [
                    "MemberGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of MemberGroup"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "MemberGroup successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/installment_rates": {
            "get": {
                "summary": "InstallmentRate cgetAction",
                "description": "Receive a list of all InstallmentRates.",
                "tags": [
                    "InstallmentRate"
                ],
                "responses": {
                    "200": {
                        "description": "InstallmentRate successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/InstallmentRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested InstallmentRates per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "paymentGateway",
                        "description": "Payment Gateway Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            }
        },
        "\/installment_rates\/{id}": {
            "get": {
                "summary": "InstallmentRate getAction",
                "description": "Receive the selected InstallmentRate.",
                "tags": [
                    "InstallmentRate"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of InstallmentRate"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "InstallmentRate successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/InstallmentRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/payment_providers": {
            "get": {
                "summary": "PaymentProvider cgetAction",
                "description": "Receive a list of all PaymentProviders.",
                "tags": [
                    "PaymentProvider"
                ],
                "responses": {
                    "200": {
                        "description": "PaymentProvider successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/PaymentProvider"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested PaymentProviders per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Payment Provider Code.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Payment Provider Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/payment_providers\/{id}": {
            "get": {
                "summary": "PaymentProvider getAction",
                "description": "Receive the selected PaymentProvider.",
                "tags": [
                    "PaymentProvider"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of PaymentProvider"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaymentProvider successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/PaymentProvider"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/payment_gateways": {
            "get": {
                "summary": "PaymentGateway cgetAction",
                "description": "Receive a list of all PaymentGateways.",
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "PaymentGateway successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/PaymentGateway"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested PaymentGateways per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Payment Gateway Code.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Payment Gateway Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/payment_gateways\/{id}": {
            "get": {
                "summary": "PaymentGateway getAction",
                "description": "Receive the selected PaymentGateway.",
                "tags": [
                    "PaymentGateway"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of PaymentGateway"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PaymentGateway successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/PaymentGateway"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/current_accounts": {
            "get": {
                "summary": "CurrentAccount cgetAction",
                "description": "Receive the selected CurrentAccount.",
                "tags": [
                    "CurrentAccount"
                ],
                "responses": {
                    "200": {
                        "description": "CurrentAccount successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/CurrentAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested CurrentAccounts per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "CurrentAccount Code.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "title",
                        "description": "CurrentAccount Title.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "CurrentAccount postAction",
                "description": "Creates a new CurrentAccount. Some valid information of a predefined Member, required for CurrentAccount postAction.",
                "tags": [
                    "CurrentAccount"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "CurrentAccount",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/CurrentAccount"
                        },
                        "description": "CurrentAccount object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CurrentAccount successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/CurrentAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/current_accounts\/{id}": {
            "put": {
                "summary": "CurrentAccount putAction",
                "description": "Update the selected CurrentAccount.",
                "tags": [
                    "CurrentAccount"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of CurrentAccount"
                    },
                    {
                        "in": "body",
                        "name": "CurrentAccount",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/CurrentAccount"
                        },
                        "description": "CurrentAccount object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CurrentAccount successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/CurrentAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "CurrentAccount getAction",
                "description": "Receive the selected CurrentAccount.",
                "tags": [
                    "CurrentAccount"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of CurrentAccount"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CurrentAccount successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/CurrentAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "CurrentAccount deleteAction",
                "description": "Permanently delete the selected CurrentAccount.",
                "tags": [
                    "CurrentAccount"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of CurrentAccount"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CurrentAccount successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/extra_info_to_products": {
            "get": {
                "summary": "ExtraInfoToProduct cgetAction",
                "description": "Receive a list of all ExtraInfoToProduct relationship.",
                "tags": [
                    "ExtraInfoToProduct"
                ],
                "responses": {
                    "200": {
                        "description": "ExtraInfoToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfoToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested ExtraInfoToProducts per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "extraInfo",
                        "description": "Extra info Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ExtraInfoToProduct postAction",
                "description": "Creates a new ExtraInfoToProduct relationship. Some valid Id's of a predefined ExtraInfo and a Product, required for ExtraInfoToProduct postAction.",
                "tags": [
                    "ExtraInfoToProduct"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ExtraInfoToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfoToProduct"
                        },
                        "description": "ExtraInfoToProduct object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ExtraInfoToProduct successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfoToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/extra_info_to_products\/{id}": {
            "put": {
                "summary": "ExtraInfoToProduct putAction",
                "description": "Update the selected ExtraInfoToProduct relationship.",
                "tags": [
                    "ExtraInfoToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ExtraInfoToProduct"
                    },
                    {
                        "in": "body",
                        "name": "ExtraInfoToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfoToProduct"
                        },
                        "description": "ExtraInfoToProduct object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExtraInfoToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfoToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ExtraInfoToProduct getAction",
                "description": "Receive the selected ExtraInfoToProduct relationship.",
                "tags": [
                    "ExtraInfoToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ExtraInfoToProduct"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExtraInfoToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfoToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ExtraInfoToProduct deleteAction",
                "description": "Permanently delete the selected ExtraInfoToProduct relationship.",
                "tags": [
                    "ExtraInfoToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ExtraInfoToProduct"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ExtraInfoToProduct successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/spec_to_products": {
            "get": {
                "summary": "SpecToProduct cgetAction",
                "description": "Receive a list of all SpecToProducts relationships.",
                "tags": [
                    "SpecToProduct"
                ],
                "responses": {
                    "200": {
                        "description": "SpecToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested SpecToProducts per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "specGroup",
                        "description": "Spec Group Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "specName",
                        "description": "Spec Name Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "specValue",
                        "description": "Spec Value Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "SpecToProduct postAction",
                "description": "Creates a new SpecToProduct relationship. Some valid information of a predefined specGroup, SpecName, specValue and a Product Id required for SpecToProduct postAction.",
                "tags": [
                    "SpecToProduct"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "SpecToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SpecToProduct"
                        },
                        "description": "SpecToProduct object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "SpecToProduct successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/spec_to_products\/{id}": {
            "put": {
                "summary": "SpecToProduct putAction",
                "description": "Update the selected SpecToProduct relationship.",
                "tags": [
                    "SpecToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecToProduct"
                    },
                    {
                        "in": "body",
                        "name": "SpecToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SpecToProduct"
                        },
                        "description": "SpecToProduct object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SpecToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "SpecToProduct getAction",
                "description": "Receive the selected SpecToProduct relationship.",
                "tags": [
                    "SpecToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecToProduct"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SpecToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "SpecToProduct deleteAction",
                "description": "Permanently delete the selected SpecToProduct relationship.",
                "tags": [
                    "SpecToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecToProduct"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "SpecToProduct successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/tags": {
            "get": {
                "summary": "Tag cgetAction",
                "description": "Receive a list of all Tags.",
                "tags": [
                    "Tag"
                ],
                "responses": {
                    "200": {
                        "description": "Tag successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Tag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Tags per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Tag Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Tag postAction",
                "description": "Creates a new Tag.",
                "tags": [
                    "Tag"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Tag",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Tag"
                        },
                        "description": "Tag object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tag successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Tag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/tags\/{id}": {
            "put": {
                "summary": "Tag putAction",
                "description": "Update the selected Tag.",
                "tags": [
                    "Tag"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Tag"
                    },
                    {
                        "in": "body",
                        "name": "Tag",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Tag"
                        },
                        "description": "Tag object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Tag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Tag getAction",
                "description": "Receive the selected Tag.",
                "tags": [
                    "Tag"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Tag"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Tag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Tag deleteAction",
                "description": "Permanently delete the selected Tag.",
                "tags": [
                    "Tag"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Tag"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Tag successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_refund_request_items": {
            "get": {
                "summary": "OrderRefundRequestItem cgetAction",
                "description": "Receive a list of all OrderRefundRequestItems.",
                "tags": [
                    "OrderRefundRequestItem"
                ],
                "responses": {
                    "200": {
                        "description": "OrderRefundRequestItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequestItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "orderRefundRequest",
                        "description": "Order refund request id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "orderItem",
                        "description": "Order item id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "OrderRefundRequestItem postAction",
                "description": "Creates a new OrderRefundRequestItem. Some valid Id's of a predefined OrderItem and an OrderRefundRequest, required for OrderRefundRequestItem postAction.",
                "tags": [
                    "OrderRefundRequestItem"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "OrderRefundRequestItem",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequestItem"
                        },
                        "description": "OrderRefundRequestItem object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OrderRefundRequestItem successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequestItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_refund_request_items\/{id}": {
            "put": {
                "summary": "OrderRefundRequestItem putAction",
                "description": "Update the selected OrderRefundRequestItem.",
                "tags": [
                    "OrderRefundRequestItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderRefundRequestItem"
                    },
                    {
                        "in": "body",
                        "name": "OrderRefundRequestItem",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequestItem"
                        },
                        "description": "OrderRefundRequestItem object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderRefundRequestItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequestItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "OrderRefundRequestItem getAction",
                "description": "Receive the selected OrderRefundRequestItem.",
                "tags": [
                    "OrderRefundRequestItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderRefundRequestItem"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderRefundRequestItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequestItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "OrderRefundRequestItem deleteAction",
                "description": "Permanently delete the selected OrderRefundRequestItem.",
                "tags": [
                    "OrderRefundRequestItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderRefundRequestItem"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OrderRefundRequestItem successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/brands": {
            "get": {
                "summary": "Brand cgetAction",
                "description": "Receive a list of all Brands.",
                "tags": [
                    "Brand"
                ],
                "responses": {
                    "200": {
                        "description": "Brand successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Brand"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Brands per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Brand Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status can be false or true",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "allowEmptyValue": false,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "distributorCode",
                        "description": "Brand Distributor Code.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "distributor",
                        "description": "Brand Distributor",
                        "maxLength": 128,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Brand postAction",
                "description": "Creates a new Brand.",
                "tags": [
                    "Brand"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Brand",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Brand"
                        },
                        "description": "Brand object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Brand successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Brand"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/brands\/{id}": {
            "put": {
                "summary": "Brand putAction",
                "description": "Update the selected Brand.",
                "tags": [
                    "Brand"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Brand"
                    },
                    {
                        "in": "body",
                        "name": "Brand",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Brand"
                        },
                        "description": "Brand object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Brand"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Brand getAction",
                "description": "Receive the selected Brand.",
                "tags": [
                    "Brand"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Brand"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Brand"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Brand deleteAction",
                "description": "Permanently delete the selected Brand.",
                "tags": [
                    "Brand"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Brand"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Brand successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_details": {
            "get": {
                "summary": "ProductDetail cgetAction",
                "description": "Receive a list of all ProductDetails.",
                "tags": [
                    "ProductDetail"
                ],
                "responses": {
                    "200": {
                        "description": "ProductDetail successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sku",
                        "description": "Product Sku",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductDetail postAction",
                "description": "Creates a new ProductDetail. Some valid information of a predefined Product, required for ProductDetail postAction.",
                "tags": [
                    "ProductDetail"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductDetail",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductDetail"
                        },
                        "description": "ProductDetail object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductDetail successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_details\/{id}": {
            "put": {
                "summary": "ProductDetail putAction",
                "description": "Update the selected ProductDetail.",
                "tags": [
                    "ProductDetail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductDetail"
                    },
                    {
                        "in": "body",
                        "name": "ProductDetail",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductDetail"
                        },
                        "description": "ProductDetail object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductDetail successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ProductDetail getAction",
                "description": "Receive the selected ProductDetail.",
                "tags": [
                    "ProductDetail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductDetail"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductDetail successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductDetail deleteAction",
                "description": "Permanently delete the selected ProductDetail.",
                "tags": [
                    "ProductDetail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductDetail"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductDetail successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/pre_order_infos": {
            "get": {
                "summary": "PreOrderInfo cgetAction",
                "description": "Receive a list of all PreOrderInfos.",
                "tags": [
                    "PreOrderInfo"
                ],
                "responses": {
                    "200": {
                        "description": "PreOrderInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/PreOrderInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested pre order infos per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sessionId",
                        "description": "Pre order info session id.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "PreOrderInfo postAction",
                "description": "Creates a new PreOrderInfo.",
                "tags": [
                    "PreOrderInfo"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "PreOrderInfo",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/PreOrderInfo"
                        },
                        "description": "PreOrderInfo object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "PreOrderInfo successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/PreOrderInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/pre_order_infos\/{id}": {
            "put": {
                "summary": "PreOrderInfo putAction",
                "description": "Update the selected PreOrderInfo.",
                "tags": [
                    "PreOrderInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of PreOrderInfo"
                    },
                    {
                        "in": "body",
                        "name": "PreOrderInfo",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/PreOrderInfo"
                        },
                        "description": "PreOrderInfo object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PreOrderInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/PreOrderInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "PreOrderInfo getAction",
                "description": "Receive the selected PreOrderInfo.",
                "tags": [
                    "PreOrderInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of PreOrderInfo"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PreOrderInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/PreOrderInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "PreOrderInfo deleteAction",
                "description": "Permanently delete the selected PreOrderInfo.",
                "tags": [
                    "PreOrderInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of PreOrderInfo"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "PreOrderInfo successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_user_notes": {
            "get": {
                "summary": "OrderUserNote cgetAction",
                "description": "Receive a list of all OrderUserNotes.",
                "tags": [
                    "OrderUserNote"
                ],
                "responses": {
                    "200": {
                        "description": "OrderUserNote successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderUserNote"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "userEmail",
                        "description": "User email.",
                        "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "OrderUserNote postAction",
                "description": "Creates a new OrderUserNote. Some valid information of a predefined Order, required for OrderUserNote postAction.",
                "tags": [
                    "OrderUserNote"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "OrderUserNote",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OrderUserNote"
                        },
                        "description": "OrderUserNote object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OrderUserNote successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderUserNote"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_user_notes\/{id}": {
            "put": {
                "summary": "OrderUserNote putAction",
                "description": "Update the selected OrderUserNote.",
                "tags": [
                    "OrderUserNote"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderUserNote"
                    },
                    {
                        "in": "body",
                        "name": "OrderUserNote",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OrderUserNote"
                        },
                        "description": "OrderUserNote object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderUserNote successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderUserNote"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "OrderUserNote getAction",
                "description": "Receive the selected OrderUserNote.",
                "tags": [
                    "OrderUserNote"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderUserNote"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderUserNote successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderUserNote"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "OrderUserNote deleteAction",
                "description": "Permanently delete the selected OrderUserNote.",
                "tags": [
                    "OrderUserNote"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderUserNote"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OrderUserNote successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipping_rates": {
            "get": {
                "summary": "ShippingRate cgetAction",
                "description": "Receive a list of all ShippingRates.",
                "tags": [
                    "ShippingRate"
                ],
                "responses": {
                    "200": {
                        "description": "ShippingRate successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested ShippingRates per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "shippingCompany",
                        "description": "Shipping Company Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "region",
                        "description": "Region Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ShippingRate postAction",
                "description": "Creates a new ShippingRate. Some valid information of a predefined Region and a ShippingCompany, required for ShippingRate postAction.",
                "tags": [
                    "ShippingRate"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ShippingRate",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ShippingRate"
                        },
                        "description": "ShippingRate object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ShippingRate successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipping_rates\/{id}": {
            "put": {
                "summary": "ShippingRate putAction",
                "description": "Update the selected ShippingRate.",
                "tags": [
                    "ShippingRate"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingRate"
                    },
                    {
                        "in": "body",
                        "name": "ShippingRate",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ShippingRate"
                        },
                        "description": "ShippingRate object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShippingRate successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ShippingRate getAction",
                "description": "Receive the selected ShippingRate.",
                "tags": [
                    "ShippingRate"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingRate"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShippingRate successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingRate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ShippingRate deleteAction",
                "description": "Permanently delete the selected ShippingRate.",
                "tags": [
                    "ShippingRate"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingRate"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ShippingRate successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_special_infos": {
            "get": {
                "summary": "ProductSpecialInfo cgetAction",
                "description": "Receive a list of all ProductSpecialInfo.",
                "tags": [
                    "ProductSpecialInfo"
                ],
                "responses": {
                    "200": {
                        "description": "ProductSpecialInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductSpecialInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "title",
                        "description": "Product Special Info Title",
                        "allowEmptyValue": false,
                        "maxLength": 65535,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Product Special Info Status",
                        "allowEmptyValue": false,
                        "type": "integer",
                        "format": "int32",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductSpecialInfo postAction",
                "description": "Creates a new ProductSpecialInfo. A valid Id of a predefined Product, required for ProductSpecialInfo postAction.",
                "tags": [
                    "ProductSpecialInfo"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductSpecialInfo",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductSpecialInfo"
                        },
                        "description": "ProductSpecialInfo object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductSpecialInfo successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductSpecialInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_special_infos\/{id}": {
            "put": {
                "summary": "ProductSpecialInfo putAction",
                "description": "Update the selected ProductSpecialInfo.",
                "tags": [
                    "ProductSpecialInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductSpecialInfo"
                    },
                    {
                        "in": "body",
                        "name": "ProductSpecialInfo",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductSpecialInfo"
                        },
                        "description": "ProductSpecialInfo object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductSpecialInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductSpecialInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ProductSpecialInfo getAction",
                "description": "Receive the selected ProductSpecialInfo.",
                "tags": [
                    "ProductSpecialInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductSpecialInfo"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductSpecialInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductSpecialInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductSpecialInfo deleteAction",
                "description": "Permanently delete the selected ProductSpecialInfo.",
                "tags": [
                    "ProductSpecialInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductSpecialInfo"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductSpecialInfo successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipments": {
            "get": {
                "summary": "Shipment cgetAction",
                "description": "Receive a list of all Shipments.",
                "tags": [
                    "Shipment"
                ],
                "responses": {
                    "200": {
                        "description": "Shipment successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Shipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Shipments per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Shipment code",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "invoiceKey",
                        "description": "Shipment invoice key",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "barcode",
                        "description": "Shipment barcode",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Shipment postAction",
                "description": "Creates a new Shipment. Some valid information of a predefined Order, required for Shipment postAction.",
                "tags": [
                    "Shipment"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Shipment",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Shipment"
                        },
                        "description": "Shipment object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Shipment successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Shipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipments\/{id}": {
            "put": {
                "summary": "Shipment putAction",
                "description": "Update the selected Shipment.",
                "tags": [
                    "Shipment"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Shipment"
                    },
                    {
                        "in": "body",
                        "name": "Shipment",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Shipment"
                        },
                        "description": "Shipment object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Shipment successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Shipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Shipment getAction",
                "description": "Receive the selected Shipment.",
                "tags": [
                    "Shipment"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Shipment"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Shipment successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Shipment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Shipment deleteAction",
                "description": "Permanently delete the selected Shipment.",
                "tags": [
                    "Shipment"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Shipment"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Shipment successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_protections": {
            "get": {
                "summary": "ProductProtection cgetAction",
                "description": "Receive a list of all ProductProtections.",
                "tags": [
                    "ProductProtection"
                ],
                "responses": {
                    "200": {
                        "description": "ProductProtection successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductProtection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "isPriceProtected",
                        "description": "Product is price protected",
                        "allowEmptyValue": false,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "isStockProtected",
                        "description": "Product is stock protected",
                        "allowEmptyValue": false,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductProtection postAction",
                "description": "Creates a new ProductProtection. Some valid information of a predefined Product, required for ProductProtection postAction.",
                "tags": [
                    "ProductProtection"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductProtection",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductProtection"
                        },
                        "description": "ProductProtection object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductProtection successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductProtection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_protections\/{id}": {
            "put": {
                "summary": "ProductProtection putAction",
                "description": "Update the selected ProductProtection.",
                "tags": [
                    "ProductProtection"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductProtection"
                    },
                    {
                        "in": "body",
                        "name": "ProductProtection",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductProtection"
                        },
                        "description": "ProductProtection object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductProtection successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductProtection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ProductProtection getAction",
                "description": "Receive the selected ProductProtection.",
                "tags": [
                    "ProductProtection"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductProtection"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductProtection successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductProtection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductProtection deleteAction",
                "description": "Permanently delete the selected ProductProtection.",
                "tags": [
                    "ProductProtection"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductProtection"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductProtection successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/regions": {
            "get": {
                "summary": "Region cgetAction",
                "description": "Receive a list of all Regions.",
                "tags": [
                    "Region"
                ],
                "responses": {
                    "200": {
                        "description": "Region successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Region"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Regions per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Region Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/regions\/{id}": {
            "get": {
                "summary": "Region getAction",
                "description": "Receive the selected Region.",
                "tags": [
                    "Region"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Region"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Region successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Region"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipment_items": {
            "get": {
                "summary": "ShipmentItem cgetAction",
                "description": "Receive a list of all ShipmentItems.",
                "tags": [
                    "ShipmentItem"
                ],
                "responses": {
                    "200": {
                        "description": "ShipmentItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShipmentItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested ShipmentItems per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "shipment",
                        "description": "Shipment Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "orderItem",
                        "description": "Order item Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ShipmentItem postAction",
                "description": "Creates a new ShipmentItem. Some valid information of a predefined orderItem, a Product and a Shipment, required for ShipmentItem postAction.",
                "tags": [
                    "ShipmentItem"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ShipmentItem",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ShipmentItem"
                        },
                        "description": "ShipmentItem object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ShipmentItem successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ShipmentItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipment_items\/{id}": {
            "put": {
                "summary": "ShipmentItem putAction",
                "description": "Update the selected ShipmentItem.",
                "tags": [
                    "ShipmentItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShipmentItem"
                    },
                    {
                        "in": "body",
                        "name": "ShipmentItem",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ShipmentItem"
                        },
                        "description": "ShipmentItem object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShipmentItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShipmentItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ShipmentItem getAction",
                "description": "Receive the selected ShipmentItem.",
                "tags": [
                    "ShipmentItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShipmentItem"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShipmentItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShipmentItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ShipmentItem deleteAction",
                "description": "Permanently delete the selected ShipmentItem.",
                "tags": [
                    "ShipmentItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShipmentItem"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ShipmentItem successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/distributors": {
            "get": {
                "summary": "Distributor cgetAction",
                "description": "Receive a list of all Distributors.",
                "tags": [
                    "Distributor"
                ],
                "responses": {
                    "200": {
                        "description": "Distributor successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Distributor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Distributors per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Distributor Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "Distributor email.",
                        "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "phone",
                        "description": "Distributor phone",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "contactPerson",
                        "description": "Distributor Contact Person",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Distributor postAction",
                "description": "Creates a new Distributor.",
                "tags": [
                    "Distributor"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Distributor",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Distributor"
                        },
                        "description": "Distributor object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Distributor successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Distributor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/distributors\/{id}": {
            "put": {
                "summary": "Distributor putAction",
                "description": "Update the selected Distributor.",
                "tags": [
                    "Distributor"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Distributor"
                    },
                    {
                        "in": "body",
                        "name": "Distributor",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Distributor"
                        },
                        "description": "Distributor object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Distributor successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Distributor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Distributor getAction",
                "description": "Receive the selected Distributor.",
                "tags": [
                    "Distributor"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Distributor"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Distributor successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Distributor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Distributor deleteAction",
                "description": "Permanently delete the selected Distributor.",
                "tags": [
                    "Distributor"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Distributor"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Distributor successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/towns": {
            "get": {
                "summary": "Town cgetAction",
                "description": "Receive a list of all Towns.",
                "tags": [
                    "Town"
                ],
                "responses": {
                    "200": {
                        "description": "Town successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Town"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Towns per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "location",
                        "description": "Location id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "townGroup",
                        "description": "Town Group id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Town name.",
                        "minLength": 1,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status can be 0 or 1",
                        "enum": [
                            "0",
                            "1"
                        ],
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Town postAction",
                "description": "Creates a new Town. Some valid information of a predefined TownGroup and a Location, required for Town postAction.",
                "tags": [
                    "Town"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Town",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Town"
                        },
                        "description": "Town object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Town successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Town"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/towns\/{id}": {
            "put": {
                "summary": "Town putAction",
                "description": "Update the selected Town.",
                "tags": [
                    "Town"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Town"
                    },
                    {
                        "in": "body",
                        "name": "Town",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Town"
                        },
                        "description": "Town object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Town successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Town"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Town getAction",
                "description": "Receive the selected Town.",
                "tags": [
                    "Town"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Town"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Town successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Town"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Town deleteAction",
                "description": "Permanently delete the selected Town.",
                "tags": [
                    "Town"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Town"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Town successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/products": {
            "get": {
                "summary": "Product cgetAction",
                "description": "Receive a list of all Products.",
                "tags": [
                    "Product"
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Products per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "parent",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "brand",
                        "description": "Brand Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "sku",
                        "description": "Product sku.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Product name.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "distributor",
                        "description": "Product distributor.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Product postAction",
                "description": "Creates a new Product. Some valid information of a predefined Currency, required for Product postAction. Also if the Product has a Brand and\/or parent product, the valid information of these entities are required.",
                "tags": [
                    "Product"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Product",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Product"
                        },
                        "description": "Product object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/products\/{id}": {
            "put": {
                "summary": "Product putAction",
                "description": "Update the selected Product.",
                "tags": [
                    "Product"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Product"
                    },
                    {
                        "in": "body",
                        "name": "Product",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Product"
                        },
                        "description": "Product object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Product getAction",
                "description": "Receive the selected Product.",
                "tags": [
                    "Product"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Product"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Product deleteAction",
                "description": "Permanently delete the selected Product.",
                "tags": [
                    "Product"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Product"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Product successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipping_providers": {
            "get": {
                "summary": "ShippingProvider cgetAction",
                "description": "Receive a list of all ShippingProviders.",
                "tags": [
                    "ShippingProvider"
                ],
                "responses": {
                    "200": {
                        "description": "ShippingProvider successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingProvider"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested ShippingProviders per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Shipping Company Code.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Shipping Company Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/shipping_providers\/{id}": {
            "get": {
                "summary": "ShippingProvider getAction",
                "description": "Receive the selected ShippingProvider.",
                "tags": [
                    "ShippingProvider"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingProvider"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShippingProvider successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingProvider"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_to_count_downs": {
            "get": {
                "summary": "ProductToCountDown cgetAction",
                "description": "Receive a list of all ProductToCountDown.",
                "tags": [
                    "ProductToCountDown"
                ],
                "responses": {
                    "200": {
                        "description": "ProductToCountDown successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCountDown"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductToCountDown postAction",
                "description": "Creates a new ProductToCountDown. A valid Id of a predefined Product, required for ProductToCountDown postAction.",
                "tags": [
                    "ProductToCountDown"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductToCountDown",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCountDown"
                        },
                        "description": "ProductToCountDown object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductToCountDown successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCountDown"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_to_count_downs\/{id}": {
            "put": {
                "summary": "ProductToCountDown putAction",
                "description": "Update the selected ProductToCountDown.",
                "tags": [
                    "ProductToCountDown"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToCountDown"
                    },
                    {
                        "in": "body",
                        "name": "ProductToCountDown",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCountDown"
                        },
                        "description": "ProductToCountDown object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductToCountDown successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCountDown"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ProductToCountDown getAction",
                "description": "Receive the selected ProductToCountDown.",
                "tags": [
                    "ProductToCountDown"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToCountDown"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductToCountDown successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCountDown"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductToCountDown deleteAction",
                "description": "Permanently delete the selected ProductToCountDown.",
                "tags": [
                    "ProductToCountDown"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToCountDown"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductToCountDown successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipping_companies": {
            "get": {
                "summary": "ShippingCompany cgetAction",
                "description": "Receive a list of all ShippingCompanies.",
                "tags": [
                    "ShippingCompany"
                ],
                "responses": {
                    "200": {
                        "description": "ShippingCompany successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingCompany"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested ShippingCompanys per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Shipping Company Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "companyCode",
                        "description": "Shipping Company Company Code.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "paymentType",
                        "description": "Payment Type can be cash_on_delivery, standart_delivery or not applicable",
                        "allowEmptyValue": false,
                        "enum": [
                            "cash_on_delivery",
                            "standart_delivery",
                            "not_applicable"
                        ],
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "shippingProvider",
                        "description": "Shipping Provider Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ShippingCompany postAction",
                "description": "Creates a new ShippingCompany relationship. Some valid information of a predefined shippingProvider, required for ShippingCompany postAction.",
                "tags": [
                    "ShippingCompany"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ShippingCompany",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ShippingCompany"
                        },
                        "description": "ShippingCompany object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ShippingCompany successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingCompany"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipping_companies\/{id}": {
            "put": {
                "summary": "ShippingCompany putAction",
                "description": "Update the selected ShippingCompany.",
                "tags": [
                    "ShippingCompany"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingCompany"
                    },
                    {
                        "in": "body",
                        "name": "ShippingCompany",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ShippingCompany"
                        },
                        "description": "ShippingCompany object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShippingCompany successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingCompany"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ShippingCompany getAction",
                "description": "Receive the selected ShippingCompany.",
                "tags": [
                    "ShippingCompany"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingCompany"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShippingCompany successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingCompany"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ShippingCompany deleteAction",
                "description": "Permanently delete the selected ShippingCompany.",
                "tags": [
                    "ShippingCompany"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingCompany"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ShippingCompany successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/selection_groups": {
            "get": {
                "summary": "SelectionGroup cgetAction",
                "description": "Receive a list of all SelectionGroups.",
                "tags": [
                    "SelectionGroup"
                ],
                "responses": {
                    "200": {
                        "description": "SelectionGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SelectionGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested SelectionGroups per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "title",
                        "description": "SelectionGroup Title.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "SelectionGroup postAction",
                "description": "Creates a new SelectionGroup.",
                "tags": [
                    "SelectionGroup"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "SelectionGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SelectionGroup"
                        },
                        "description": "SelectionGroup object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "SelectionGroup successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/SelectionGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/selection_groups\/{id}": {
            "put": {
                "summary": "SelectionGroup putAction",
                "description": "Update the selected SelectionGroup.",
                "tags": [
                    "SelectionGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SelectionGroup"
                    },
                    {
                        "in": "body",
                        "name": "SelectionGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SelectionGroup"
                        },
                        "description": "SelectionGroup object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SelectionGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SelectionGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "SelectionGroup getAction",
                "description": "Receive the selected SelectionGroup.",
                "tags": [
                    "SelectionGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SelectionGroup"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SelectionGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SelectionGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "SelectionGroup deleteAction",
                "description": "Permanently delete the selected SelectionGroup.",
                "tags": [
                    "SelectionGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SelectionGroup"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "SelectionGroup successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/maillist_groups": {
            "get": {
                "summary": "MaillistGroup cgetAction",
                "description": "Receive a list of all MaillistGroups.",
                "tags": [
                    "MaillistGroup"
                ],
                "responses": {
                    "200": {
                        "description": "MaillistGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/MaillistGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested MaillistGroups per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Brand Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "MaillistGroup postAction",
                "description": "Creates a new MaillistGroup.",
                "tags": [
                    "MaillistGroup"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "MaillistGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/MaillistGroup"
                        },
                        "description": "MaillistGroup object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "MaillistGroup successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/MaillistGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/maillist_groups\/{id}": {
            "put": {
                "summary": "MaillistGroup putAction",
                "description": "Update the selected MaillistGroup.",
                "tags": [
                    "MaillistGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of MaillistGroup"
                    },
                    {
                        "in": "body",
                        "name": "MaillistGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/MaillistGroup"
                        },
                        "description": "MaillistGroup object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MaillistGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/MaillistGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "MaillistGroup getAction",
                "description": "Receive the selected MaillistGroup.",
                "tags": [
                    "MaillistGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of MaillistGroup"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MaillistGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/MaillistGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "MaillistGroup deleteAction",
                "description": "Permanently delete the selected MaillistGroup.",
                "tags": [
                    "MaillistGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of MaillistGroup"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "MaillistGroup successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/spec_names": {
            "get": {
                "summary": "SpecName cgetAction",
                "description": "Receive a list of all SpecNames.",
                "tags": [
                    "SpecName"
                ],
                "responses": {
                    "200": {
                        "description": "SpecName successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecName"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested SpecNames per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Spec Name Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "specGroup",
                        "description": "Spec Group Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "choiceType",
                        "description": "Status can be singular or plural",
                        "enum": [
                            "singular",
                            "plural"
                        ],
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "SpecName postAction",
                "description": "Creates a new SpecName.",
                "tags": [
                    "SpecName"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "SpecName",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SpecName"
                        },
                        "description": "SpecName object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "SpecName successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecName"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/spec_names\/{id}": {
            "put": {
                "summary": "SpecName putAction",
                "description": "Update the selected SpecName.",
                "tags": [
                    "SpecName"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecName"
                    },
                    {
                        "in": "body",
                        "name": "SpecName",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SpecName"
                        },
                        "description": "SpecName object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SpecName successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecName"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "SpecName getAction",
                "description": "Receive the selected SpecName.",
                "tags": [
                    "SpecName"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecName"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SpecName successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecName"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "SpecName deleteAction",
                "description": "Permanently delete the selected SpecName.",
                "tags": [
                    "SpecName"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecName"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "SpecName successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/carts": {
            "post": {
                "summary": "Cart postAction",
                "description": "Creates a new Cart. CartItem, Member, ShopCampaigns (if the cart has a promotion) and ShopTokens(if the cart has a token) must be predefined to create a Cart.",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Cart",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Cart"
                        },
                        "description": "Cart object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Cart successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Cart"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/carts\/{id}": {
            "get": {
                "summary": "Cart getAction",
                "description": "Receive the selected Cart.",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Cart"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cart successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Cart"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Cart deleteAction",
                "description": "Permanently delete the selected Cart.",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Cart"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Cart successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/locations": {
            "get": {
                "summary": "Location cgetAction",
                "description": "Receive a list of all Locations.",
                "tags": [
                    "Location"
                ],
                "responses": {
                    "200": {
                        "description": "Location successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Locations per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Brand Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "country",
                        "description": "Country Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "region",
                        "description": "Region Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            }
        },
        "\/locations\/{id}": {
            "get": {
                "summary": "Location getAction",
                "description": "Receive the selected Location.",
                "tags": [
                    "Location"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Location"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Location successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Location"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/members": {
            "get": {
                "summary": "Member cgetAction",
                "description": "Receive a list of all Members.",
                "tags": [
                    "Member"
                ],
                "responses": {
                    "200": {
                        "description": "Member successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Member"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Members per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "firstname",
                        "description": "Firstname.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "surname",
                        "description": "Surname.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "Email.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "gender",
                        "description": "Gender can be male or female",
                        "enum": [
                            "male",
                            "female"
                        ],
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "mobilePhoneNumber",
                        "description": "Member Mobile Phone Number.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "phoneNumber",
                        "description": "Member Phone Number.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "memberGroup",
                        "description": "Member Group Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "location",
                        "description": "Location Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "country",
                        "description": "Country Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "referredMember",
                        "description": "Referred Member Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Member postAction",
                "description": "Creates a new Member. Some valid information of a predefined Country, a Location and a MemberGroup, required for Member postAction.",
                "tags": [
                    "Member"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Member",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Member"
                        },
                        "description": "Member object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Member successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Member"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/members\/{id}": {
            "put": {
                "summary": "Member putAction",
                "description": "Update the selected Member.",
                "tags": [
                    "Member"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Member"
                    },
                    {
                        "in": "body",
                        "name": "Member",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Member"
                        },
                        "description": "Member object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Member"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Member getAction",
                "description": "Receive the selected Member.",
                "tags": [
                    "Member"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Member"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Member"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Member deleteAction",
                "description": "Permanently delete the selected Member.",
                "tags": [
                    "Member"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Member"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Member successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/members\/combined": {
            "get": {
                "summary": "Member combinedAction",
                "description": "Receives the today, monthly, yearly and total Member sign in statistics in terms of totalCount.",
                "tags": [
                    "Member"
                ],
                "responses": {
                    "200": {
                        "description": "Member successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Member"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/members\/charts": {
            "get": {
                "summary": "Member chartsAction",
                "description": "Receives the general statistics of Member in terms of time.",
                "tags": [
                    "Member"
                ],
                "responses": {
                    "200": {
                        "description": "Member successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Member"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "timeFrame",
                        "description": "Can be these values: full, year, month or week",
                        "pattern": "^full$|^year$|^month$|^week$",
                        "type": "string",
                        "required": true
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "description": "Start of the time frame",
                        "pattern": "\\d{4}-[0-1]\\d-[0-2]\\d",
                        "type": "string",
                        "required": true
                    }
                ]
            }
        },
        "\/options": {
            "get": {
                "summary": "Options cgetAction",
                "description": "Receive a list of all Options.",
                "tags": [
                    "Options"
                ],
                "responses": {
                    "200": {
                        "description": "Options successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Options"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Optionss per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "title",
                        "description": "Options title.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "optionGroup",
                        "description": "Option Group Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Options postAction",
                "description": "Creates a new Option. Some valid information of a predefined optionGroup, required for Options postAction.",
                "tags": [
                    "Options"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Options",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Options"
                        },
                        "description": "Options object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Options successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Options"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/options\/{id}": {
            "put": {
                "summary": "Options putAction",
                "description": "Update the selected Options.",
                "tags": [
                    "Options"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Options"
                    },
                    {
                        "in": "body",
                        "name": "Options",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Options"
                        },
                        "description": "Options object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Options successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Options"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Options getAction",
                "description": "Receive the selected Options.",
                "tags": [
                    "Options"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Options"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Options successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Options"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Options deleteAction",
                "description": "Permanently delete the selected Options.",
                "tags": [
                    "Options"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Options"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Options successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_items": {
            "get": {
                "summary": "OrderItem cgetAction",
                "description": "Receive a list of all OrderItems.",
                "tags": [
                    "OrderItem"
                ],
                "responses": {
                    "200": {
                        "description": "OrderItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "productName",
                        "description": "Product name.",
                        "minLength": 1,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "productSku",
                        "description": "Product sku.",
                        "minLength": 1,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "productBarcode",
                        "description": "Product barcode.",
                        "minLength": 1,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/order_items\/{id}": {
            "get": {
                "summary": "OrderItem getAction",
                "description": "Receive the selected OrderItem.",
                "tags": [
                    "OrderItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderItem"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_to_categories": {
            "get": {
                "summary": "ProductToCategory cgetAction",
                "description": "Receive a list of all ProductToCategory relationships.",
                "tags": [
                    "ProductToCategory"
                ],
                "responses": {
                    "200": {
                        "description": "ProductToCategory successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "category",
                        "description": "Category Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductToCategory postAction",
                "description": "Creates a new ProductToCategory relationship. Some valid IDs of a predefined Product and a Category, required for ProductToCategory postAction.",
                "tags": [
                    "ProductToCategory"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductToCategory",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCategory"
                        },
                        "description": "ProductToCategory object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductToCategory successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_to_categories\/{id}": {
            "put": {
                "summary": "ProductToCategory putAction",
                "description": "Update the selected ProductToCategory.",
                "tags": [
                    "ProductToCategory"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToCategory"
                    },
                    {
                        "in": "body",
                        "name": "ProductToCategory",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCategory"
                        },
                        "description": "ProductToCategory object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductToCategory successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ProductToCategory getAction",
                "description": "Receive the selected ProductToCategory relationship.",
                "tags": [
                    "ProductToCategory"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToCategory"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductToCategory successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToCategory"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductToCategory deleteAction",
                "description": "Permanently delete the selected ProductToCategory relationship.",
                "tags": [
                    "ProductToCategory"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToCategory"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductToCategory successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/categories": {
            "get": {
                "summary": "Category cgetAction",
                "description": "Receive a list of all Categories.",
                "tags": [
                    "Category"
                ],
                "responses": {
                    "200": {
                        "description": "Category successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Categorys per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Category Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status can be false or true",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "allowEmptyValue": false,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "distributorCode",
                        "description": "Category Distributor Code.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "distributor",
                        "description": "Category Distributor",
                        "maxLength": 128,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "parent",
                        "description": "Parent Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Category postAction",
                "description": "Creates a new Category.",
                "tags": [
                    "Category"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Category",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Category"
                        },
                        "description": "Category object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Category successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/categories\/{id}": {
            "put": {
                "summary": "Category putAction",
                "description": "Update the selected Category.",
                "tags": [
                    "Category"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Category"
                    },
                    {
                        "in": "body",
                        "name": "Category",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Category"
                        },
                        "description": "Category object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Category getAction",
                "description": "Receive the selected Category.",
                "tags": [
                    "Category"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Category"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Category deleteAction",
                "description": "Permanently delete the selected Category.",
                "tags": [
                    "Category"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Category"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/selection_to_products": {
            "get": {
                "summary": "SelectionToProduct cgetAction",
                "description": "Receive a list of all SelectionToProducts.",
                "tags": [
                    "SelectionToProduct"
                ],
                "responses": {
                    "200": {
                        "description": "SelectionToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SelectionToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "selection",
                        "description": "Selection Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "SelectionToProduct postAction",
                "description": "Creates a new SelectionToProduct relationship. Some valid Id's of a predefined Selection and a Product, required for SelectionToProduct postAction.",
                "tags": [
                    "SelectionToProduct"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "SelectionToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SelectionToProduct"
                        },
                        "description": "SelectionToProduct object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "SelectionToProduct successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/SelectionToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/selection_to_products\/{id}": {
            "put": {
                "summary": "SelectionToProduct putAction",
                "description": "Update the selected SelectionToProduct.",
                "tags": [
                    "SelectionToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SelectionToProduct"
                    },
                    {
                        "in": "body",
                        "name": "SelectionToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SelectionToProduct"
                        },
                        "description": "SelectionToProduct object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SelectionToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SelectionToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "SelectionToProduct getAction",
                "description": "Receive the selected SelectionToProduct relationship.",
                "tags": [
                    "SelectionToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SelectionToProduct"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SelectionToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SelectionToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "SelectionToProduct deleteAction",
                "description": "Permanently delete the selected SelectionToProduct relationship.",
                "tags": [
                    "SelectionToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SelectionToProduct"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "SelectionToProduct successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/extra_infos": {
            "get": {
                "summary": "ExtraInfo cgetAction",
                "description": "Receive a list of all ExtraInfo.",
                "tags": [
                    "ExtraInfo"
                ],
                "responses": {
                    "200": {
                        "description": "ExtraInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested ExtraInfos per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Extra info name",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ExtraInfo postAction",
                "description": "Creates a new ExtraInfo.",
                "tags": [
                    "ExtraInfo"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ExtraInfo",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfo"
                        },
                        "description": "ExtraInfo object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ExtraInfo successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/extra_infos\/{id}": {
            "put": {
                "summary": "ExtraInfo putAction",
                "description": "Update the selected ExtraInfo.",
                "tags": [
                    "ExtraInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ExtraInfo"
                    },
                    {
                        "in": "body",
                        "name": "ExtraInfo",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfo"
                        },
                        "description": "ExtraInfo object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExtraInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ExtraInfo getAction",
                "description": "Receive the selected ExtraInfo.",
                "tags": [
                    "ExtraInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ExtraInfo"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExtraInfo successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ExtraInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ExtraInfo deleteAction",
                "description": "Permanently delete the selected ExtraInfo.",
                "tags": [
                    "ExtraInfo"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ExtraInfo"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ExtraInfo successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_images": {
            "get": {
                "summary": "ProductImage cgetAction",
                "description": "Receive a list of all ProductImages.",
                "tags": [
                    "ProductImage"
                ],
                "responses": {
                    "200": {
                        "description": "ProductImage successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductImage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "fileName",
                        "description": "Product Image File Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductImage postAction",
                "description": "Creates a new ProductImage. A valid Id of a predefined Product, required for ProductImage postAction.",
                "tags": [
                    "ProductImage"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductImage",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductImage"
                        },
                        "description": "ProductImage object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductImage successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductImage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_images\/{id}": {
            "get": {
                "summary": "ProductImage getAction",
                "description": "Receive the selected ProductImage.",
                "tags": [
                    "ProductImage"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductImage"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductImage successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductImage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductImage deleteAction",
                "description": "Permanently delete the selected ProductImage.",
                "tags": [
                    "ProductImage"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductImage"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductImage successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/town_groups": {
            "get": {
                "summary": "TownGroup cgetAction",
                "description": "Receive a list of all TownGroups.",
                "tags": [
                    "TownGroup"
                ],
                "responses": {
                    "200": {
                        "description": "TownGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/TownGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested TownGroups per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Town Group name.",
                        "minLength": 1,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "TownGroup postAction",
                "description": "Creates a new TownGroup.",
                "tags": [
                    "TownGroup"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "TownGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/TownGroup"
                        },
                        "description": "TownGroup object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "TownGroup successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/TownGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/town_groups\/{id}": {
            "put": {
                "summary": "TownGroup putAction",
                "description": "Update the selected TownGroup.",
                "tags": [
                    "TownGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of TownGroup"
                    },
                    {
                        "in": "body",
                        "name": "TownGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/TownGroup"
                        },
                        "description": "TownGroup object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TownGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/TownGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "TownGroup getAction",
                "description": "Receive the selected TownGroup.",
                "tags": [
                    "TownGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of TownGroup"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TownGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/TownGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "TownGroup deleteAction",
                "description": "Permanently delete the selected TownGroup.",
                "tags": [
                    "TownGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of TownGroup"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "TownGroup successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/option_groups": {
            "get": {
                "summary": "OptionGroup cgetAction",
                "description": "Receive a list of all OptionGroups.",
                "tags": [
                    "OptionGroup"
                ],
                "responses": {
                    "200": {
                        "description": "OptionGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OptionGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested OptionGroups per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "title",
                        "description": "OptionGroup Title.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "OptionGroup postAction",
                "description": "Creates a new option\/variant group.",
                "tags": [
                    "OptionGroup"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "OptionGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OptionGroup"
                        },
                        "description": "OptionGroup object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OptionGroup successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/OptionGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/option_groups\/{id}": {
            "put": {
                "summary": "OptionGroup putAction",
                "description": "Update the selected OptionGroup.",
                "tags": [
                    "OptionGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OptionGroup"
                    },
                    {
                        "in": "body",
                        "name": "OptionGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OptionGroup"
                        },
                        "description": "OptionGroup object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OptionGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OptionGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "OptionGroup getAction",
                "description": "Receive the selected OptionGroup.",
                "tags": [
                    "OptionGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OptionGroup"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OptionGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OptionGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "OptionGroup deleteAction",
                "description": "Permanently delete the selected OptionGroup.",
                "tags": [
                    "OptionGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OptionGroup"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OptionGroup successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/preferences": {
            "get": {
                "summary": "Preference cgetAction",
                "description": "Receive a list of all Preferences.",
                "tags": [
                    "ShopPreference"
                ],
                "responses": {
                    "200": {
                        "description": "ShopPreference successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShopPreference"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 100,
                        "description": "Number of requested Preferences per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "varKey",
                        "description": "Preferences var key.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/preferences\/{id}": {
            "get": {
                "summary": "Preference getAction",
                "description": "Receive the selected Preference.",
                "tags": [
                    "ShopPreference"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShopPreference"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShopPreference successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShopPreference"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/billing_addresses": {
            "get": {
                "summary": "BillingAddress cgetAction",
                "description": "Receive a list of all BillingAddresses.",
                "tags": [
                    "BillingAddress"
                ],
                "responses": {
                    "200": {
                        "description": "BillingAddress successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/BillingAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                      "description": "{\n  \"firstname\": \"John\",\n  \"surname\": \"Doe\",\n  \"country\": \"Turkiye\",\n  \"location\": \"Afyon\",\n  \"subLocation\": \"\u00dcsk\u00fcdar\",\n  \"address\": \"ideasoft gebze osgb teknopark no:1\",\n  \"phoneNumber\": \"+90 (216) 555 55 55\",\n  \"mobilePhoneNumber\": \"+90 (555) 555 55 55\",\n  \"order\": {\n    \"id\": \"1\"\n  },\n  \"invoiceType\": \"individual\",\n  \"identityRegistrationNumber\": \"79977966572\"\n}",
                      "in": "body",
                      "name": "BillingAddress",
                      "required": true,
                      "schema": {
                        "$ref": "#/definitions/BillingAddress"
                      }
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "BillingAddress postAction",
                "description": "Creates a new BillingAddress. A valid Id of a predefined Order, required for BillingAddress postAction.",
                "tags": [
                    "BillingAddress"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "BillingAddress",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/BillingAddress"
                        },
                        "description": "BillingAddress object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "BillingAddress successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/BillingAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/billing_addresses\/{id}": {
            "put": {
                "summary": "BillingAddress putAction",
                "description": "Update the selected BillingAddress.",
                "tags": [
                    "BillingAddress"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of BillingAddress"
                    },
                    {
                        "in": "body",
                        "name": "BillingAddress",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/BillingAddress"
                        },
                        "description": "BillingAddress object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BillingAddress successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/BillingAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "BillingAddress getAction",
                "description": "Receive the selected BillingAddress.",
                "tags": [
                    "BillingAddress"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of BillingAddress"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BillingAddress successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/BillingAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_details": {
            "get": {
                "summary": "OrderDetail cgetAction",
                "description": "Receive a list of all OrderDetails.",
                "tags": [
                    "OrderDetail"
                ],
                "responses": {
                    "200": {
                        "description": "OrderDetail successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "OrderDetail postAction",
                "description": "Creates a new OrderDetail. A valid Id of a predefined Order, required for OrderDetail postAction.",
                "tags": [
                    "OrderDetail"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "OrderDetail",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OrderDetail"
                        },
                        "description": "OrderDetail object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OrderDetail successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_details\/{id}": {
            "put": {
                "summary": "OrderDetail putAction",
                "description": "Update the selected OrderDetail.",
                "tags": [
                    "OrderDetail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderDetail"
                    },
                    {
                        "in": "body",
                        "name": "OrderDetail",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OrderDetail"
                        },
                        "description": "OrderDetail object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderDetail successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "OrderDetail getAction",
                "description": "Receive the selected OrderDetail.",
                "tags": [
                    "OrderDetail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderDetail"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderDetail successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "OrderDetail deleteAction",
                "description": "Permanently delete the selected OrderDetail.",
                "tags": [
                    "OrderDetail"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderDetail"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OrderDetail successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/favourited_products": {
            "get": {
                "summary": "FavouritedProduct cgetAction",
                "description": "Receive a list of all FavouritedProducts.",
                "tags": [
                    "FavouritedProduct"
                ],
                "responses": {
                    "200": {
                        "description": "FavouritedProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/FavouritedProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested FavouritedProducts per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "FavouritedProduct postAction",
                "description": "Creates a new FavouritedProduct. A valid ID of a predefined Product, required for FavouritedProduct postAction.",
                "tags": [
                    "FavouritedProduct"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "FavouritedProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/FavouritedProduct"
                        },
                        "description": "FavouritedProduct object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "FavouritedProduct successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/FavouritedProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/favourited_products\/{id}": {
            "put": {
                "summary": "FavouritedProduct putAction",
                "description": "Update the selected FavouritedProduct.",
                "tags": [
                    "FavouritedProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of FavouritedProduct"
                    },
                    {
                        "in": "body",
                        "name": "FavouritedProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/FavouritedProduct"
                        },
                        "description": "FavouritedProduct object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FavouritedProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/FavouritedProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "FavouritedProduct getAction",
                "description": "Receive the selected FavouritedProduct.",
                "tags": [
                    "FavouritedProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of FavouritedProduct"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FavouritedProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/FavouritedProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "FavouritedProduct deleteAction",
                "description": "Permanently delete the selected FavouritedProduct.",
                "tags": [
                    "FavouritedProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of FavouritedProduct"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "FavouritedProduct successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_to_tags": {
            "get": {
                "summary": "ProductToTag cgetAction",
                "description": "Receive a list of all ProductToTags.",
                "tags": [
                    "ProductToTag"
                ],
                "responses": {
                    "200": {
                        "description": "ProductToTag successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToTag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "tag",
                        "description": "Tag Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ProductToTag postAction",
                "description": "Creates a new ProductToTag relationship. Some valid ID's of a predefined Product and a Tag, required for ProductToTag postAction.",
                "tags": [
                    "ProductToTag"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ProductToTag",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductToTag"
                        },
                        "description": "ProductToTag object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ProductToTag successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToTag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/product_to_tags\/{id}": {
            "put": {
                "summary": "ProductToTag putAction",
                "description": "Update the selected ProductToTag relationship.",
                "tags": [
                    "ProductToTag"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToTag"
                    },
                    {
                        "in": "body",
                        "name": "ProductToTag",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ProductToTag"
                        },
                        "description": "ProductToTag object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductToTag successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToTag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ProductToTag getAction",
                "description": "Receive the selected ProductToTag relationship.",
                "tags": [
                    "ProductToTag"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToTag"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ProductToTag successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ProductToTag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "ProductToTag deleteAction",
                "description": "Permanently delete the selected ProductToTag relationship.",
                "tags": [
                    "ProductToTag"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ProductToTag"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ProductToTag successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/users": {
            "get": {
                "summary": "User cgetAction",
                "description": "Receive a list of all Users.",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "User successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Users per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "firstname",
                        "description": "Firstname.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "surname",
                        "description": "Surname.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "Email.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "username",
                        "description": "Username.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "phoneNumber",
                        "description": "Phone Number.",
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "isOwner",
                        "description": "Is Owner.",
                        "allowEmptyValue": false,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status Can be 0 for passive, 1 for active or 2 for queue",
                        "allowEmptyValue": false,
                        "enum": [
                            "0",
                            "1",
                            "2"
                        ],
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/users\/{id}": {
            "get": {
                "summary": "User getAction",
                "description": "Receive the selected User.",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of User"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/quick_carts": {
            "get": {
                "summary": "QuickCart cgetAction",
                "description": "Receive a list of all QuickCarts.",
                "tags": [
                    "QuickCart"
                ],
                "responses": {
                    "200": {
                        "description": "QuickCart successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/QuickCart"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested QuickCarts per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "QuickCart Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "QuickCart postAction",
                "description": "Creates a new QuickCart.",
                "tags": [
                    "QuickCart"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "QuickCart",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/QuickCart"
                        },
                        "description": "QuickCart object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "QuickCart successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/QuickCart"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/quick_carts\/{id}": {
            "put": {
                "summary": "QuickCart putAction",
                "description": "Update the selected QuickCart.",
                "tags": [
                    "QuickCart"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of QuickCart"
                    },
                    {
                        "in": "body",
                        "name": "QuickCart",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/QuickCart"
                        },
                        "description": "QuickCart object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "QuickCart successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/QuickCart"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "QuickCart getAction",
                "description": "Receive the selected QuickCart.",
                "tags": [
                    "QuickCart"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of QuickCart"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "QuickCart successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/QuickCart"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "QuickCart deleteAction",
                "description": "Permanently delete the selected QuickCart.",
                "tags": [
                    "QuickCart"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of QuickCart"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "QuickCart successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/distributor_to_products": {
            "get": {
                "summary": "DistributorToProduct cgetAction",
                "description": "Receive a list of all DistributorToProduct relationships.",
                "tags": [
                    "DistributorToProduct"
                ],
                "responses": {
                    "200": {
                        "description": "DistributorToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/DistributorToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested DistributorToProducts per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "distributor",
                        "description": "Distributor Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "product",
                        "description": "Product Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "DistributorToProduct postAction",
                "description": "Creates a new DistributorToProduct relationship. Some valid information of a predefined Distributor and a Product, required for DistributorToProduct postAction.",
                "tags": [
                    "DistributorToProduct"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "DistributorToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/DistributorToProduct"
                        },
                        "description": "DistributorToProduct object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "DistributorToProduct successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/DistributorToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/distributor_to_products\/{id}": {
            "put": {
                "summary": "DistributorToProduct putAction",
                "description": "Update the selected DistributorToProduct.",
                "tags": [
                    "DistributorToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of DistributorToProduct"
                    },
                    {
                        "in": "body",
                        "name": "DistributorToProduct",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/DistributorToProduct"
                        },
                        "description": "DistributorToProduct object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DistributorToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/DistributorToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "DistributorToProduct getAction",
                "description": "Receive the selected DistributorToProduct relationship.",
                "tags": [
                    "DistributorToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of DistributorToProduct"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "DistributorToProduct successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/DistributorToProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "DistributorToProduct deleteAction",
                "description": "Permanently delete the selected DistributorToProduct relationship.",
                "tags": [
                    "DistributorToProduct"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of DistributorToProduct"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "DistributorToProduct successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/currencies": {
            "get": {
                "summary": "Currency cgetAction",
                "description": "Receive a list of all Currencies.",
                "tags": [
                    "Currency"
                ],
                "responses": {
                    "200": {
                        "description": "Currency successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Currency"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Currencys per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "label",
                        "description": "Currency Label.",
                        "maxLength": 50,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "abbr",
                        "description": "Status can be false or true",
                        "maxLength": 5,
                        "type": "string",
                        "required": false
                    }
                ]
            }
        },
        "\/currencies\/{id}": {
            "put": {
                "summary": "Currency putAction",
                "description": "Update the selected Currency.",
                "tags": [
                    "Currency"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Currency"
                    },
                    {
                        "in": "body",
                        "name": "Currency",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Currency"
                        },
                        "description": "Currency object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Currency successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Currency"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Currency getAction",
                "description": "Receive the selected Currency.",
                "tags": [
                    "Currency"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Currency"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Currency successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Currency"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/spec_groups": {
            "get": {
                "summary": "SpecGroup cgetAction",
                "description": "Receive a list of all SpecGroups.",
                "tags": [
                    "SpecGroup"
                ],
                "responses": {
                    "200": {
                        "description": "SpecGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested SpecGroups per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Spec Group Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "SpecGroup postAction",
                "description": "Creates a new SpecGroup.",
                "tags": [
                    "SpecGroup"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "SpecGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SpecGroup"
                        },
                        "description": "SpecGroup object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "SpecGroup successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/spec_groups\/{id}": {
            "put": {
                "summary": "SpecGroup putAction",
                "description": "Update the selected SpecGroup.",
                "tags": [
                    "SpecGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecGroup"
                    },
                    {
                        "in": "body",
                        "name": "SpecGroup",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/SpecGroup"
                        },
                        "description": "SpecGroup object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SpecGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "SpecGroup getAction",
                "description": "Receive the selected SpecGroup.",
                "tags": [
                    "SpecGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecGroup"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SpecGroup successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/SpecGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "SpecGroup deleteAction",
                "description": "Permanently delete the selected SpecGroup.",
                "tags": [
                    "SpecGroup"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of SpecGroup"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "SpecGroup successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipping_addresses": {
            "get": {
                "summary": "ShippingAddress cgetAction",
                "description": "Receive a list of all ShippingAddress.",
                "tags": [
                    "ShippingAddress"
                ],
                "responses": {
                    "200": {
                        "description": "ShippingAddress successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "ShippingAddress postAction",
                "description": "Creates a new ShippingAddress. A valid Id of a predefined Order, required for ShippingAddress postAction.",
                "tags": [
                    "ShippingAddress"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "ShippingAddress",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ShippingAddress"
                        },
                        "description": "ShippingAddress object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ShippingAddress successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/shipping_addresses\/{id}": {
            "put": {
                "summary": "ShippingAddress putAction",
                "description": "Update the selected ShippingAddress.",
                "tags": [
                    "ShippingAddress"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingAddress"
                    },
                    {
                        "in": "body",
                        "name": "ShippingAddress",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/ShippingAddress"
                        },
                        "description": "ShippingAddress object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShippingAddress successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "ShippingAddress getAction",
                "description": "Receive the selected ShippingAddress.",
                "tags": [
                    "ShippingAddress"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of ShippingAddress"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ShippingAddress successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/ShippingAddress"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/cart_items": {
            "post": {
                "summary": "CartItem postAction",
                "description": "Creates a new CartItem. Cart, Product, CartItemAttributes and CartItem are connected entities. Need some valid\/predefined information of each related item.",
                "tags": [
                    "CartItem"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "CartItem",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/CartItem"
                        },
                        "description": "CartItem object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "CartItem successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/CartItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/cart_items\/{id}": {
            "put": {
                "summary": "CartItem putAction",
                "description": "Update the selected CartItem.",
                "tags": [
                    "CartItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of CartItem"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CartItem successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/CartItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "CartItem deleteAction",
                "description": "Permanently delete the selected CartItem.",
                "tags": [
                    "CartItem"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of CartItem"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CartItem successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_refund_requests": {
            "get": {
                "summary": "OrderRefundRequest cgetAction",
                "description": "Receive a list of all OrderRefundRequests.",
                "tags": [
                    "OrderRefundRequest"
                ],
                "responses": {
                    "200": {
                        "description": "OrderRefundRequest successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "member",
                        "description": "Member id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "code",
                        "description": "Order refund request code.",
                        "minLength": 1,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status can be waiting_for_approval, approved or cancelled",
                        "enum": [
                            "waiting_for_approval",
                            "approved",
                            "cancelled"
                        ],
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "OrderRefundRequest postAction",
                "description": "Creates a new OrderRefundRequest. Some valid IDs of a predefined Member and an Order, required for OrderRefundRequest postAction.",
                "tags": [
                    "OrderRefundRequest"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "OrderRefundRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequest"
                        },
                        "description": "OrderRefundRequest object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OrderRefundRequest successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/order_refund_requests\/{id}": {
            "put": {
                "summary": "OrderRefundRequest putAction",
                "description": "Update the selected OrderRefundRequest.",
                "tags": [
                    "OrderRefundRequest"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderRefundRequest"
                    },
                    {
                        "in": "body",
                        "name": "OrderRefundRequest",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequest"
                        },
                        "description": "OrderRefundRequest object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderRefundRequest successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "OrderRefundRequest getAction",
                "description": "Receive the selected OrderRefundRequest.",
                "tags": [
                    "OrderRefundRequest"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderRefundRequest"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrderRefundRequest successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/OrderRefundRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "OrderRefundRequest deleteAction",
                "description": "Permanently delete the selected OrderRefundRequest.",
                "tags": [
                    "OrderRefundRequest"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of OrderRefundRequest"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OrderRefundRequest successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/payments": {
            "get": {
                "summary": "Payment cgetAction",
                "description": "Receive a list of all Payments.",
                "tags": [
                    "Payment"
                ],
                "responses": {
                    "200": {
                        "description": "Payment successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Payment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "transactionId",
                        "description": "Transaction id.",
                        "minLength": 1,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "memberEmail",
                        "description": "Customer email.",
                        "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "member",
                        "description": "Member id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "description": "Status can be waiting_for_approval, approved, fulfilled, cancelled, delivered, on_accumulation, waiting_for_payment, being_prepared, refunded, personal_status_1, personal_status_2, personal_status_3, deleted, failed, or in_transaction",
                        "enum": [
                            "waiting_for_approval",
                            "approved",
                            "fulfilled",
                            "cancelled",
                            "delivered",
                            "on_accumulation",
                            "waiting_for_payment",
                            "being_prepared",
                            "refunded",
                            "personal_status_1",
                            "personal_status_2",
                            "personal_status_3",
                            "deleted",
                            "failed",
                            "in_transaction"
                        ],
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "paymentTypeName",
                        "description": "Payment type name can be Havale, \u00d6zel \u00d6deme Sistemi, Kredi Kart\u0131, Paypal, GarantiPay, Mail Order, BKM Express, Kap\u0131da \u00d6deme Nakit or Kap\u0131da \u00d6deme Kredi Kart\u0131",
                        "enum": [
                            "Havale",
                            "\u00d6zel \u00d6deme Sistemi",
                            "Kredi Kart\u0131",
                            "Paypal",
                            "GarantiPay",
                            "Mail Order",
                            "BKM Express",
                            "Kap\u0131da \u00d6deme Nakit",
                            "Kap\u0131da \u00d6deme Kredi Kart\u0131"
                        ],
                        "type": "string",
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Payment postAction",
                "description": "Creates a new Payment. Some valid information of a predefined Member, paymentGateway and a paymentProvider, required for Payment postAction.",
                "tags": [
                    "Payment"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Payment",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Payment"
                        },
                        "description": "Payment object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Payment successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Payment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/payments\/{id}": {
            "put": {
                "summary": "Payment putAction",
                "description": "Update the selected Payment.",
                "tags": [
                    "Payment"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Payment"
                    },
                    {
                        "in": "body",
                        "name": "Payment",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Payment"
                        },
                        "description": "Payment object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Payment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Payment getAction",
                "description": "Receive the selected Payment.",
                "tags": [
                    "Payment"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Payment"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Payment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Payment deleteAction",
                "description": "Permanently delete the selected Payment.",
                "tags": [
                    "Payment"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Payment"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Payment successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/maillists": {
            "get": {
                "summary": "Maillist cgetAction",
                "description": "Receive a list of all Maillists.",
                "tags": [
                    "Maillist"
                ],
                "responses": {
                    "200": {
                        "description": "Maillist successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Maillist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "sort",
                        "description": "Example sort=id",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "default": 20,
                        "description": "Number of requested Maillists per page",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 100,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "default": 1,
                        "description": "Which page to start from",
                        "type": "integer",
                        "minimum": 1,
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "description": "Maillist Name.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "description": "Maillist Email.",
                        "allowEmptyValue": false,
                        "maxLength": 255,
                        "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                        "type": "string",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "maillistGroup",
                        "description": "Maillist Group Id",
                        "type": "integer",
                        "minimum": 0,
                        "required": false
                    }
                ]
            },
            "post": {
                "summary": "Maillist postAction",
                "description": "Creates a new Maillist. Some valid information of a predefined MaillistGroup can be required for Maillist postAction if the Maillist has a group.",
                "tags": [
                    "Maillist"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "Maillist",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Maillist"
                        },
                        "description": "Maillist object"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Maillist successfully created.",
                        "schema": {
                            "$ref": "#\/definitions\/Maillist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        },
        "\/maillists\/{id}": {
            "put": {
                "summary": "Maillist putAction",
                "description": "Update the selected Maillist.",
                "tags": [
                    "Maillist"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Maillist"
                    },
                    {
                        "in": "body",
                        "name": "Maillist",
                        "required": true,
                        "schema": {
                            "$ref": "#\/definitions\/Maillist"
                        },
                        "description": "Maillist object"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Maillist successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Maillist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Maillist getAction",
                "description": "Receive the selected Maillist.",
                "tags": [
                    "Maillist"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Maillist"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Maillist successfully listed.",
                        "schema": {
                            "$ref": "#\/definitions\/Maillist"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Maillist deleteAction",
                "description": "Permanently delete the selected Maillist.",
                "tags": [
                    "Maillist"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "type": "integer",
                        "required": true,
                        "description": "Id value of Maillist"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Maillist successfully deleted."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#\/definitions\/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Error": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "min": 100,
                    "max": 600
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "SpecValue": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the SpecValue.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the SpecValue.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the SpecValue. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 999
                },
                "logo": {
                    "description": "Path of the logo image of the SpecValue.<ul class='idea_choice_list'><li> <label>jpg<\/label>:jpg<\/li><li> <label>png<\/label>:png<\/li><li> <label>gif<\/label>:gif<\/li><li> <label>jpeg<\/label>:jpeg<\/li><\/ul><ul class='idea_choice_list'><li> <label>jpg<\/label>:jpg<\/li><li> <label>png<\/label>:png<\/li><li> <label>gif<\/label>:gif<\/li><li> <label>jpeg<\/label>:jpeg<\/li><\/ul>",
                    "enum": [
                        "jpg",
                        "png",
                        "gif",
                        "jpeg"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "status": {
                    "description": "'Determines the state of being active of the SpecValue. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "specGroup": {
                    "description": "specGroup",
                    "$ref": "#\/definitions\/SpecGroup"
                },
                "specName": {
                    "description": "specName",
                    "$ref": "#\/definitions\/SpecName"
                }
            },
            "required": [
                "id",
                "name",
                "sortOrder",
                "status"
            ]
        },
        "Order": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Order.",
                    "type": "integer",
                    "format": "int32"
                },
                "customerFirstname": {
                    "description": "Customer first name.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "customerSurname": {
                    "description": "Customer surname.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "customerEmail": {
                    "description": "Customer e-mail address.",
                    "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "customerPhone": {
                    "description": "Customer phone number.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "paymentTypeName": {
                    "description": "Payment type name of the order. paymentTypeName must be predefined.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "paymentProviderCode": {
                    "description": "Payment provider code of the order. paymentProviderCode must be predefined. API generates that code automatically.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "paymentProviderName": {
                    "description": "Payment provider name of the order. paymentProviderName must be predefined.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "paymentGatewayCode": {
                    "description": "Payment gateway code of the order. paymentGatewayCode must be predefined. API generates that code automatically",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "paymentGatewayName": {
                    "description": "Payment gateway name of the order. paymentGatewayName must be predefined.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "bankName": {
                    "description": "Bank name of the order. bankName must be predefined.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "clientIp": {
                    "description": "Ip information of customer.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "userAgent": {
                    "description": "Current browser information of the user. For example, 'Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'.",
                    "maxLength": 1024,
                    "type": "string",
                    "format": "string"
                },
                "currency": {
                    "description": "Selected currency for payment.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "currencyRates": {
                    "description": "Selected currency for payment.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "amount": {
                    "description": "Amount of the order. (Tax value is not included)",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "couponDiscount": {
                    "description": "Used coupon discount for the order.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "taxAmount": {
                    "description": "Tax amount for the order.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "promotionDiscount": {
                    "description": "Promotion discount for the order.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "generalAmount": {
                    "description": "General amount for the order. Includes: order amount, coupon discount, tax amount, coupon discount and promotion discount.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "shippingAmount": {
                    "description": "Shipping amount for the order.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "additionalServiceAmount": {
                    "description": "Additional service amount for the order.",
                    "type": "number",
                    "format": "float"
                },
                "finalAmount": {
                    "description": "Final amount of the order. Includes: order amount, coupon discount, tax amount, coupon discount and promotion discount, shipping amount, additional service amount.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "sumOfGainedPoints": {
                    "description": "Total gained points from the order.",
                    "type": "number",
                    "minimum": 0,
                    "format": "float"
                },
                "installment": {
                    "description": "Number of installment for the order.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 12,
                    "format": "int32"
                },
                "installmentRate": {
                    "description": "Number of installment for the order.",
                    "type": "number",
                    "format": "float"
                },
                "extraInstallment": {
                    "description": "Extra installment information of the order.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 12,
                    "format": "int32"
                },
                "transactionId": {
                    "description": "The unique numeric identifier for the transaction of the order.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "hasUserNote": {
                    "description": "'1' order has a user note, '0' order has no user note.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "status": {
                    "description": "Order status information.<ul class='idea_choice_list'><li> <label>deleted<\/label>:deleted<\/li><li> <label>waiting_for_approval<\/label>:waiting_for_approval<\/li><li> <label>approved<\/label>:approved<\/li><li> <label>fulfilled<\/label>:fulfilled<\/li><li> <label>cancelled<\/label>:cancelled<\/li><li> <label>delivered<\/label>:delivered<\/li><li> <label>on_accumulation<\/label>:on_accumulation<\/li><li> <label>waiting_for_payment<\/label>:waiting_for_payment<\/li><li> <label>being_prepared<\/label>:being_prepared<\/li><li> <label>refunded<\/label>:refunded<\/li><li> <label>personal_status_1<\/label>:personal_status_1<\/li><li> <label>personal_status_2<\/label>:personal_status_2<\/li><li> <label>personal_status_3<\/label>:personal_status_3<\/li><\/ul><ul class='idea_choice_list'><li> <label>deleted<\/label>:deleted<\/li><li> <label>waiting_for_approval<\/label>:waiting_for_approval<\/li><li> <label>approved<\/label>:approved<\/li><li> <label>fulfilled<\/label>:fulfilled<\/li><li> <label>cancelled<\/label>:cancelled<\/li><li> <label>delivered<\/label>:delivered<\/li><li> <label>on_accumulation<\/label>:on_accumulation<\/li><li> <label>waiting_for_payment<\/label>:waiting_for_payment<\/li><li> <label>being_prepared<\/label>:being_prepared<\/li><li> <label>refunded<\/label>:refunded<\/li><li> <label>personal_status_1<\/label>:personal_status_1<\/li><li> <label>personal_status_2<\/label>:personal_status_2<\/li><li> <label>personal_status_3<\/label>:personal_status_3<\/li><\/ul>",
                    "enum": [
                        "deleted",
                        "waiting_for_approval",
                        "approved",
                        "fulfilled",
                        "cancelled",
                        "delivered",
                        "on_accumulation",
                        "waiting_for_payment",
                        "being_prepared",
                        "refunded",
                        "personal_status_1",
                        "personal_status_2",
                        "personal_status_3"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "paymentStatus": {
                    "description": "Payment status information.<ul class='idea_choice_list'><li> <label>in_transaction<\/label>:in_transaction<\/li><li> <label>failed<\/label>:failed<\/li><li> <label>success<\/label>:success<\/li><\/ul><ul class='idea_choice_list'><li> <label>in_transaction<\/label>:in_transaction<\/li><li> <label>failed<\/label>:failed<\/li><li> <label>success<\/label>:success<\/li><\/ul>",
                    "enum": [
                        "in_transaction",
                        "failed",
                        "success"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "errorMessage": {
                    "description": "Error message of the order.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "deviceType": {
                    "description": "Device type information of the custormer.<ul class='idea_choice_list'><li> <label>desktop<\/label>:desktop<\/li><li> <label>mobile<\/label>:mobile<\/li><li> <label>tablet<\/label>:tablet<\/li><\/ul><ul class='idea_choice_list'><li> <label>desktop<\/label>:desktop<\/li><li> <label>mobile<\/label>:mobile<\/li><li> <label>tablet<\/label>:tablet<\/li><\/ul>",
                    "enum": [
                        "desktop",
                        "mobile",
                        "tablet"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 32
                },
                "referrer": {
                    "description": "The referrer information of the order. It also includes full URI of the referred web site. API generates that code automatically.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "invoicePrintCount": {
                    "description": "Number of printed invoice for the order.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int32"
                },
                "useGiftPackage": {
                    "description": "'1' use gift package, '0' do not use gift package.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "giftNote": {
                    "description": "Gift note (text) of the Order.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "memberGroupName": {
                    "description": "The memberGroupName of the member who is giving the Order.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "usePromotion": {
                    "description": "'1' use promotion, '0' do not use promotion.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "shippingProviderCode": {
                    "description": "Shipping provider code of the order. shippingProviderCode must be predefined. API generates that code automatically if shippingProviderName exists.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "shippingProviderName": {
                    "description": "Shipping provider name of the order. shippingProviderName must be predefined.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "shippingCompanyName": {
                    "description": "Shipping company name of the order. shippingCompanyName must be predefined.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "shippingPaymentType": {
                    "description": "Shipping payment type of the order.<ul class='idea_choice_list'><li> <label>cash_on_delivery<\/label>:cash_on_delivery<\/li><li> <label>standart_delivery<\/label>:standart_delivery<\/li><li> <label>not_applicable<\/label>:not_applicable<\/li><\/ul><ul class='idea_choice_list'><li> <label>cash_on_delivery<\/label>:cash_on_delivery<\/li><li> <label>standart_delivery<\/label>:standart_delivery<\/li><li> <label>not_applicable<\/label>:not_applicable<\/li><\/ul>",
                    "enum": [
                        "cash_on_delivery",
                        "standart_delivery",
                        "not_applicable"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 128
                },
                "shippingTrackingCode": {
                    "description": "Shipping tracking code of the order. API generates that code automatically.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "source": {
                    "description": "Source information of the order. Specifies the software source of the order.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "updatedAt": {
                    "description": "The date and time when the Order was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "maillist": {
                    "description": "maillist",
                    "$ref": "#\/definitions\/Maillist"
                },
                "member": {
                    "description": "member",
                    "$ref": "#\/definitions\/Member"
                },
                "orderDetails": {
                    "description": "orderDetails",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/OrderDetail"
                    }
                },
                "orderItems": {
                    "description": "orderItems",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/OrderItem"
                    }
                },
                "shippingAddress": {
                    "description": "shippingAddress",
                    "$ref": "#\/definitions\/ShippingAddress"
                },
                "billingAddress": {
                    "description": "billingAddress",
                    "$ref": "#\/definitions\/BillingAddress"
                }
            },
            "required": [
                "id",
                "customerFirstname",
                "customerSurname",
                "customerEmail",
                "customerPhone",
                "paymentTypeName",
                "paymentProviderCode",
                "paymentProviderName",
                "paymentGatewayCode",
                "paymentGatewayName",
                "clientIp",
                "currency",
                "currencyRates",
                "amount",
                "couponDiscount",
                "taxAmount",
                "promotionDiscount",
                "generalAmount",
                "shippingAmount",
                "additionalServiceAmount",
                "finalAmount",
                "sumOfGainedPoints",
                "installment",
                "installmentRate",
                "extraInstallment",
                "hasUserNote",
                "status",
                "paymentStatus",
                "deviceType",
                "invoicePrintCount",
                "useGiftPackage",
                "usePromotion",
                "nebimTransferStatus",
                "paidFromCurrentAccount",
                "source",
                "createdAt",
                "updatedAt"
            ]
        },
        "ProductButton": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductButton.",
                    "type": "integer",
                    "format": "int32"
                },
                "fastShipping": {
                    "description": "Determines is the fast shipping feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "sameDayShipping": {
                    "description": "Determines is the same day shipping feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "threeDaysDelivery": {
                    "description": "Determines is the three days shipping feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "fiveDaysDelivery": {
                    "description": "Determines is the five days shipping feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "sevenDaysDelivery": {
                    "description": "Determines is the seven days shipping feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "freeShipping": {
                    "description": "Determines is the free shipping feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "deliveryFromStock": {
                    "description": "Determines is the delivery from stock feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "preOrderedProduct": {
                    "description": "Determines is the pre ordered product feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "limitedStock": {
                    "description": "Determines is the limited stock feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "askStock": {
                    "description": "Determines is the ask stock feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "campaignedProduct": {
                    "description": "Determines is the campaigned product feature enable or disable for the product. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id"
            ]
        },
        "ProductPrice": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductPrice.",
                    "type": "integer",
                    "format": "int32"
                },
                "value": {
                    "description": "The value of the ProductPrice.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "type": {
                    "description": "Type (price index) of the ProductPrice.",
                    "type": "integer",
                    "minimum": 2,
                    "maximum": 5,
                    "format": "int32"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id",
                "value",
                "type"
            ]
        },
        "Selection": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Selection.",
                    "type": "integer",
                    "format": "int32"
                },
                "title": {
                    "description": "Title of the Selection.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the Selection. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32"
                },
                "selectionGroup": {
                    "description": "selectionGroup",
                    "$ref": "#\/definitions\/SelectionGroup"
                }
            },
            "required": [
                "id",
                "title"
            ]
        },
        "OptionToProduct": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the OptionToProduct.",
                    "type": "integer",
                    "format": "int32"
                },
                "parentProductId": {
                    "description": "Parent product Id value.",
                    "type": "integer",
                    "format": "int32"
                },
                "optionGroup": {
                    "description": "optionGroup",
                    "$ref": "#\/definitions\/OptionGroup"
                },
                "option": {
                    "description": "option",
                    "$ref": "#\/definitions\/Options"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id",
                "parentProductId"
            ]
        },
        "MemberGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the MemberGroup.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the MemberGroup.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "priceIndex": {
                    "description": "The assigned price index for the MemberGroup.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "format": "int32"
                },
                "allowedPaymentGateways": {
                    "description": "Allowed payment gateways for the MemberGroup.",
                    "maxLength": 512,
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "name",
                "priceIndex",
                "allowedPaymentGateways"
            ]
        },
        "InstallmentRate": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the InstallmentRate.",
                    "type": "integer",
                    "format": "int32"
                },
                "installment": {
                    "description": "Amount of installment.",
                    "type": "integer",
                    "format": "int32"
                },
                "rate": {
                    "description": "Rate of the delay interest of the installment.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "paymentGateway": {
                    "description": "paymentGateway",
                    "$ref": "#\/definitions\/PaymentGateway"
                }
            },
            "required": [
                "id",
                "installment",
                "rate"
            ]
        },
        "PaymentProvider": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the PaymentProvider.",
                    "type": "integer",
                    "format": "int32"
                },
                "code": {
                    "description": "A given code for PaymentProvider.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "name": {
                    "description": "The name of the PaymentProvider.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Determines the state of being active of the PaymentProvider. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "paymentType": {
                    "description": "paymentType",
                    "$ref": "#\/definitions\/PaymentType"
                },
                "settings": {
                    "description": "settings",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/PaymentProviderSetting"
                    }
                }
            },
            "required": [
                "id",
                "code",
                "name",
                "status"
            ]
        },
        "PaymentGateway": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the PaymentGateway.",
                    "type": "integer",
                    "format": "int32"
                },
                "code": {
                    "description": "A given code for the PaymentGateway.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "name": {
                    "description": "The name of the PaymentGateway.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Status information of the PaymentGateway. <ul class='idea_choice_list'><li> <label>Active<\/label>:active<\/li><li> <label>Passive<\/label>:passive<\/li><\/ul>",
                    "enum": [
                        "active",
                        "passive"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "sortOrder": {
                    "description": "Sorting value of the PaymentGateway. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int32"
                },
                "paymentProvider": {
                    "description": "paymentProvider",
                    "$ref": "#\/definitions\/PaymentProvider"
                },
                "settings": {
                    "description": "settings",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/PaymentGatewaySetting"
                    }
                }
            },
            "required": [
                "id",
                "code",
                "name",
                "status",
                "createdAt",
                "updatedAt"
            ]
        },
        "CurrentAccount": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the CurrentAccount.",
                    "type": "integer",
                    "format": "int32"
                },
                "code": {
                    "description": "An editable code for CurrentAccount.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "title": {
                    "description": "Title of the CurrentAccount.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "balance": {
                    "description": "The balance value at the CurrentAccount.",
                    "type": "number",
                    "format": "float"
                },
                "riskLimit": {
                    "description": "The determined limit of purchase for the CurrentAccount. Market owner determines that on admin panel.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "createdAt": {
                    "description": "The date and time when the CurrentAccount was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the CurrentAccount was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "member": {
                    "description": "member",
                    "$ref": "#\/definitions\/Member"
                }
            },
            "required": [
                "id",
                "title",
                "balance",
                "riskLimit",
                "createdAt",
                "updatedAt"
            ]
        },
        "ExtraInfoToProduct": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ExtraInfoToProduct.",
                    "type": "integer",
                    "format": "int32"
                },
                "value": {
                    "description": "Value of the ExtraInfoToProduct. For example, If the ExtraInfo is 'Colour', then value of the ExtraInfoToProduct can be 'Red'.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "extraInfo": {
                    "description": "extraInfo",
                    "$ref": "#\/definitions\/ExtraInfo"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id",
                "value"
            ]
        },
        "SpecToProduct": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the SpecToProduct.",
                    "type": "integer",
                    "format": "int32"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                },
                "specGroup": {
                    "description": "specGroup",
                    "$ref": "#\/definitions\/SpecGroup"
                },
                "specName": {
                    "description": "specName",
                    "$ref": "#\/definitions\/SpecName"
                },
                "specValue": {
                    "description": "specValue",
                    "$ref": "#\/definitions\/SpecValue"
                }
            },
            "required": [
                "id"
            ]
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Tag.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Tag.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "count": {
                    "description": "Count of have many times this tag used.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "pageTitle": {
                    "description": "Title of the Tag page.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "metaDescription": {
                    "description": "The description which is visible to search engines like Google.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "metaKeywords": {
                    "description": "Keywords which are visible to search engines like Bing.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "name",
                "count",
                "pageTitle",
                "metaDescription",
                "metaKeywords"
            ]
        },
        "OrderRefundRequestItem": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the OrderRefundRequestItem.",
                    "type": "integer",
                    "format": "int32"
                },
                "amount": {
                    "description": "Amount of refund requested item\/product.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "reason": {
                    "description": "Refund request reason. There are four given reasons which are not editable: <ul class='idea_choice_list'><li> <label>\u00dcr\u00fcn\u00fc iade etmek istiyorum.<\/label><\/li><li> <label>\u00dcr\u00fcn\u00fc de\u011fi\u015ftirmek istiyorum.<\/label><\/li><li> <label>Faturadaki \u00fcr\u00fcnler ile bana gelen \u00fcr\u00fcnler farkl\u0131.<\/label><\/li><li> <label>Di\u011fer<\/label><\/li><\/ul>",
                    "maxLength": 1024,
                    "type": "string",
                    "format": "string"
                },
                "details": {
                    "description": "Detailed description of the OrderRefundRequest.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "createdAt": {
                    "description": "The date and time when the OrderRefundRequest was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the OrderRefundRequest was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "orderItem": {
                    "description": "orderItem",
                    "$ref": "#\/definitions\/OrderItem"
                },
                "orderRefundRequest": {
                    "description": "orderRefundRequest",
                    "$ref": "#\/definitions\/OrderRefundRequest"
                }
            },
            "required": [
                "id",
                "amount",
                "reason",
                "details",
                "createdAt",
                "updatedAt"
            ]
        },
        "Brand": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Brand.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Brand.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "slug": {
                    "description": "Slug is the descriptive parameter of the Brand which is shown on url. For example, 'STORENAME.myideasoft.com/marka/example-slug'. Default value of this parameter is the name of the current Brand.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the Brand. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 999
                },
                "status": {
                    "description": "Determines the state of being active of the Brand. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "distributorCode": {
                    "description": "The description of the Distributor Code.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "distributor": {
                    "description": "The description of the Distributor.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "imageFile": {
                    "description": "The path of the Brand Image File. (Valid image types are .JPG, .PNG, .GIF)",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "showcaseContent": {
                    "description": "The top content of the Brand page which is editable through admin panel.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "displayShowcaseContent": {
                    "description": "Display status of Brand showcase content. <ul class='idea_choice_list'><li> <label>Display<\/label>:1<\/li><li> <label>Nondisplay<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "metaKeywords": {
                    "description": "Keywords which are visible to search engines like Bing.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "metaDescription": {
                    "description": "The description which is visible to search engines like Google.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "pageTitle": {
                    "description": "The title of the Brand page.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "createdAt": {
                    "description": "The date and time when the Brand was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the Brand was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                }
            },
            "required": [
                "id",
                "name",
                "sortOrder",
                "status",
                "distributorCode",
                "displayShowcaseContent",
                "createdAt"
            ]
        },
        "ProductDetail": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductDetail.",
                    "type": "integer",
                    "format": "int32"
                },
                "sku": {
                    "description": "The product's SKU.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "details": {
                    "description": "Details of the product. This text area is suitable for HTML codes.",
                    "type": "string",
                    "format": "string"
                },
                "extraDetails": {
                    "description": "Extra details of the product. This text area is suitable for HTML codes.",
                    "type": "string",
                    "format": "string"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id",
                "sku",
                "details"
            ]
        },
        "PreOrderInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the PreOrderInfo.",
                    "type": "integer",
                    "format": "int32"
                },
                "sessionId": {
                    "description": "The unique ID code which determines the last login of the user.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "customerFirstname": {
                    "description": "Customer first name.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "customerSurname": {
                    "description": "Customer surname.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "customerEmail": {
                    "description": "Customer e-mail address.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "shippingFirstname": {
                    "description": "Shipping first name information.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "shippingSurname": {
                    "description": "Shipping surname information.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "shippingAddress": {
                    "description": "Shipping address information.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "shippingPhoneNumber": {
                    "description": "Shipping phone number information.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "shippingMobilePhoneNumber": {
                    "description": "Shipping mobile phone number information.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "shippingLocationName": {
                    "description": "Shipping location name information.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "shippingTown": {
                    "description": "Shipping town information.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "differentBillingAddress": {
                    "description": "Determines the existence of a diffrent billing address. <ul class='idea_choice_list'><li> <label>Exists<\/label>:1<\/li><li> <label>Non-Exists<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "billingFirstname": {
                    "description": "Billing first name information.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "billingSurname": {
                    "description": "Billing surname information.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "billingAddress": {
                    "description": "Billing address information.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "billingPhoneNumber": {
                    "description": "Billing phone number information.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "billingMobilePhoneNumber": {
                    "description": "Billing mobile phone number information.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "billingLocationName": {
                    "description": "Billing location name of the associated Order/PreOrder.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "billingTown": {
                    "description": "Billing town information.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "billingInvoiceType": {
                    "description": "Determines the type of billing invoice.<ul class='idea_choice_list'><li> <label>Individual<\/label>:individual<\/li><li> <label>Corporate<\/label>:corporate<\/li><\/ul><ul class='idea_choice_list'><li> <label>individual<\/label>:individual<\/li><li> <label>corporate<\/label>:corporate<\/li><\/ul>",
                    "enum": [
                        "individual",
                        "corporate"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 32
                },
                "billingIdentityRegistrationNumber": {
                    "description": "Billing identity registration number information.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "billingTaxOffice": {
                    "description": "Billing tax office information.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "billingTaxNo": {
                    "description": "Billing tax no information.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "isEinvoiceUser": {
                    "description": "Determines customer is a e-invoice user or not. <ul class='idea_choice_list'><li> <label>Yes<\/label>:1<\/li><li> <label>No<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "useGiftPackage": {
                    "description": "Determines is the customer wants gift package or not. <ul class='idea_choice_list'><li> <label>Yes<\/label>:1<\/li><li> <label>No<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "giftNote": {
                    "description": "Gift note information.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "imageFile": {
                    "description": "The path of the PreOrderInfo Image File. (Valid image types are .JPG, .PNG, .GIF)",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "deliveryDate": {
                    "description": "The date and time when the customer wants the delivery.",
                    "type": "string",
                    "format": "date",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "deliveryTime": {
                    "description": "API generates and uses that parameter. Not useful in the practice.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "createdAt": {
                    "description": "The date and time when the PreOrderInfo was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the PreOrderInfo was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "billingCountry": {
                    "description": "billingCountry",
                    "$ref": "#\/definitions\/Country"
                },
                "billingLocation": {
                    "description": "billingLocation",
                    "$ref": "#\/definitions\/Location"
                },
                "shippingCompany": {
                    "description": "shippingCompany",
                    "$ref": "#\/definitions\/ShippingCompany"
                },
                "shippingCountry": {
                    "description": "shippingCountry",
                    "$ref": "#\/definitions\/Country"
                },
                "shippingLocation": {
                    "description": "shippingLocation",
                    "$ref": "#\/definitions\/Location"
                },
                "memberShippingAddress": {
                    "description": "memberShippingAddress",
                    "$ref": "#\/definitions\/MemberAddress"
                },
                "memberBillingAddress": {
                    "description": "memberBillingAddress",
                    "$ref": "#\/definitions\/MemberAddress"
                }
            },
            "required": [
                "id",
                "sessionId",
                "shippingFirstname",
                "shippingSurname",
                "shippingAddress",
                "shippingPhoneNumber",
                "shippingLocationName",
                "shippingTown",
                "differentBillingAddress",
                "billingFirstname",
                "billingSurname",
                "billingAddress",
                "billingPhoneNumber",
                "billingLocationName",
                "billingTown",
                "billingInvoiceType",
                "isEinvoiceUser",
                "useGiftPackage",
                "createdAt",
                "updatedAt"
            ]
        },
        "OrderUserNote": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the OrderUserNote.",
                    "type": "integer",
                    "format": "int32"
                },
                "userEmail": {
                    "description": "User e-mail information.",
                    "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "userFirstname": {
                    "description": "User first name.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "userSurname": {
                    "description": "User surname.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "note": {
                    "description": "User's note for the Order.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "createdAt": {
                    "description": "The date and time when the OrderUserNote was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the OrderUserNote was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "order": {
                    "description": "order",
                    "$ref": "#\/definitions\/Order"
                }
            },
            "required": [
                "id",
                "userEmail",
                "note",
                "createdAt",
                "updatedAt"
            ]
        },
        "ShippingRate": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ShippingRate.",
                    "type": "integer",
                    "format": "int32"
                },
                "volumetricWeightStart": {
                    "description": "Minimum volumetric weight value for the selected region, shipping company and rate.",
                    "type": "integer",
                    "format": "int32"
                },
                "volumetricWeightEnd": {
                    "description": "Maximum volumetric weight value for the selected region, shipping company and rate.",
                    "type": "integer",
                    "format": "int32"
                },
                "rate": {
                    "description": "Shipping rate for the selected region and shipping company. ",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "region": {
                    "description": "region",
                    "$ref": "#\/definitions\/Region"
                },
                "shippingCompany": {
                    "description": "shippingCompany",
                    "$ref": "#\/definitions\/ShippingCompany"
                }
            },
            "required": [
                "id",
                "volumetricWeightStart",
                "volumetricWeightEnd",
                "rate"
            ]
        },
        "ProductSpecialInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductSpecialInfo.",
                    "type": "integer",
                    "format": "int32"
                },
                "title": {
                    "description": "Title of the ProductSpecialInfo.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "content": {
                    "description": "Content of the ProductSpecialInfo",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Determines the state of being active of the ProductSpecialInfo. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "format": "int32"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id",
                "title",
                "content",
                "status"
            ]
        },
        "Shipment": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Shipment.",
                    "type": "integer",
                    "format": "int32"
                },
                "barcode": {
                    "description": "Barcode of the Shipment.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "waybillNo": {
                    "description": "Shipment bill no.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "invoiceKey": {
                    "description": "Invoice key of the Shipment.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "cargoOffice": {
                    "description": "Cargo office of the Shipment.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "code": {
                    "description": "Shipment code.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "deliveryType": {
                    "description": "Delivery type of the Shipment.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "invoiceIncluded": {
                    "description": "Determines is the invoice incluede or excluded. <ul class='idea_choice_list'><li> <label>Included<\/label>:1<\/li><li> <label>Excluded<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "payAtDoorAmount": {
                    "description": "Extra fee\/price for paying at door service.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "createdAt": {
                    "description": "The date and time when the Shipment was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "status": {
                    "description": "Determines the state of being active of the Shipment. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1,
                    "format": "int32"
                },
                "order": {
                    "description": "order",
                    "$ref": "#\/definitions\/Order"
                }
            },
            "required": [
                "id",
                "createdAt",
                "status"
            ]
        },
        "ProductProtection": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductProtection.",
                    "type": "integer",
                    "format": "int32"
                },
                "isPriceProtected": {
                    "description": "Determines is the price of the product protected or not. <ul class='idea_choice_list'><li> <label>Protected<\/label>:1<\/li><li> <label>Not Protected<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "isStockProtected": {
                    "description": "Determines is the stock of the product protected or not. <ul class='idea_choice_list'><li> <label>Protected<\/label>:1<\/li><li> <label>Not Protected<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id",
                "isPriceProtected",
                "isStockProtected"
            ]
        },
        "Region": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Region.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Region.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "name",
                "createdAt",
                "updatedAt"
            ]
        },
        "ShipmentItem": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ShipmentItem.",
                    "type": "integer",
                    "format": "int32"
                },
                "rootProductId": {
                    "description": "Id value of the root product.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "amount": {
                    "description": "Amount of the ShipmentItem.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "price": {
                    "description": "Price of the ShipmentItem.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "productLabel": {
                    "description": "The visible name of the ShipmentItem.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "currency": {
                    "description": "Determines the currency for the ShipmentItem. <ul class='idea_choice_list'><li> <label>USD<\/label>:USD<\/li><li> <label>EUR<\/label>:EUR<\/li><li> <label>TL<\/label>:TL<\/li><li> <label>GBP<\/label>:GBP<\/li><li> <label>JPY<\/label>:JPY<\/li><li> <label>CNY<\/label>:CNY<\/li><li> <label>GR<\/label>:GR<\/li><li> <label>CHF<\/label>:CHF<\/li><\/ul><ul class='idea_choice_list'><li> <label>USD<\/label>:USD<\/li><li> <label>EUR<\/label>:EUR<\/li><li> <label>TL<\/label>:TL<\/li><li> <label>GBP<\/label>:GBP<\/li><li> <label>JPY<\/label>:JPY<\/li><li> <label>CNY<\/label>:CNY<\/li><li> <label>GR<\/label>:GR<\/li><li> <label>CHF<\/label>:CHF<\/li><\/ul>",
                    "maxLength": 255,
                    "enum": [
                        "USD",
                        "EUR",
                        "TL",
                        "GBP",
                        "JPY",
                        "CNY",
                        "GR",
                        "CHF"
                    ],
                    "type": "string",
                    "format": "string"
                },
                "tax": {
                    "description": "Tax value for the ShipmentItem.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "dm3": {
                    "description": "Volumetric weight of the ShipmentItem.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "createdAt": {
                    "description": "The date and time when the ShipmentItem was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "status": {
                    "description": "Determines the state of being active of the ShipmentItem. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 1
                },
                "updatedAt": {
                    "description": "The date and time when the ShipmentItem was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "orderItem": {
                    "description": "orderItem",
                    "$ref": "#\/definitions\/OrderItem"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                },
                "shipment": {
                    "description": "shipment",
                    "$ref": "#\/definitions\/Shipment"
                }
            },
            "required": [
                "id",
                "amount",
                "price",
                "currency",
                "dm3",
                "createdAt",
                "status"
            ]
        },
        "Distributor": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier for the Distributor.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Distributor.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "email": {
                    "description": "E-mail address of the Distributor.",
                    "maxLength": 255,
                    "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                    "type": "string",
                    "format": "string"
                },
                "phone": {
                    "description": "Phone number of the Distributor.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "contactPerson": {
                    "description": "Contact Person name of the Distributor.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "name"
            ]
        },
        "Town": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Town.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Town.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Status information of the Town.<ul class='idea_choice_list'><li> <label>Passive<\/label>:0<\/li><li> <label>Active<\/label>:1<\/li><\/ul><ul class='idea_choice_list'><li> <label>0<\/label>:0<\/li><li> <label>1<\/label>:1<\/li><\/ul>",
                    "maxLength": 255,
                    "enum": [
                        "0",
                        "1"
                    ],
                    "type": "string",
                    "format": "string"
                },
                "location": {
                    "description": "location",
                    "$ref": "#\/definitions\/Location"
                },
                "townGroup": {
                    "description": "townGroup",
                    "$ref": "#\/definitions\/TownGroup"
                }
            },
            "required": [
                "id",
                "name",
                "status"
            ]
        },
        "Product": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Product.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The specific name of the Product. For example, IdeaSoft E-Commerce Website.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "slug": {
                    "description": "Slug is the descriptive parameter of the Product which is shown on url. For example, 'STORENAME.myideasoft.com/urun/example-slug'. Default value of this parameter is the name of the current Product.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "fullName": {
                    "description": "The full name (parent name + specific name) of the Product. For example, IdeaSoft E-Commerce Website.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sku": {
                    "description": "A unique numeric identifier for the order. This one is used by the shop owner and customer. This is different from the id property, which is also a unique numeric identifier for the order, but used for stock-keeping unit.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "barcode": {
                    "description": "Barcode of the Product.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "price1": {
                    "description": "Default price for the Product. (Price 1)",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "warranty": {
                    "description": "Warranty period of the Product. (in terms of year)",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "tax": {
                    "description": "Tax value of the Product. (in terms of percentage)",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "stockAmount": {
                    "description": "Stock amount of the Product.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "volumetricWeight": {
                    "description": "Volumetric weight of the Product. (desi-kg)",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "buyingPrice": {
                    "description": "Market price of the Product.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "stockTypeLabel": {
                    "description": "Stock type of the Product.<ul class='idea_choice_list'><li> <label>Piece<\/label>:Piece<\/li><li> <label>cm<\/label>:cm<\/li><li> <label>Dozen<\/label>:Dozen<\/li><li> <label>gram<\/label>:gram<\/li><li> <label>kg<\/label>:kg<\/li><li> <label>Person<\/label>:Person<\/li><li> <label>Package<\/label>:Package<\/li><li> <label>metre<\/label>:metre<\/li><li> <label>m2<\/label>:m2<\/li><li> <label>pair<\/label>:pair<\/li><\/ul><ul class='idea_choice_list'><li> <label>Piece<\/label>:Piece<\/li><li> <label>cm<\/label>:cm<\/li><li> <label>Dozen<\/label>:Dozen<\/li><li> <label>gram<\/label>:gram<\/li><li> <label>kg<\/label>:kg<\/li><li> <label>Person<\/label>:Person<\/li><li> <label>Package<\/label>:Package<\/li><li> <label>metre<\/label>:metre<\/li><li> <label>m2<\/label>:m2<\/li><li> <label>pair<\/label>:pair<\/li><\/ul>",
                    "maxLength": 255,
                    "enum": [
                        "Piece",
                        "cm",
                        "Dozen",
                        "gram",
                        "kg",
                        "Person",
                        "Package",
                        "metre",
                        "m2",
                        "pair"
                    ],
                    "type": "string",
                    "format": "string"
                },
                "discount": {
                    "description": "Default discount value of the Product.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "discountType": {
                    "description": "Determines discount type of the Product.<ul class='idea_choice_list'><li> <label>Percentage<\/label>:1<\/li><li> <label>Cost<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 1
                },
                "moneyOrderDiscount": {
                    "description": "Discount value when the payment type was money order.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0,
                    "maximum": 99.99
                },
                "status": {
                    "description": "Determines the state of being active of the Product.<ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 1
                },
                "taxIncluded": {
                    "description": "Determines if the tax incluede to the total amount or not.<ul class='idea_choice_list'><li> <label>Included<\/label>:1<\/li><li> <label>Excluded<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "distributor": {
                    "description": "The description of the Distributor.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "isGifted": {
                    "description": "Gift existence information of Product.<ul class='idea_choice_list'><li> <label>Has gift<\/label>:1<\/li><li> <label>Has no gift<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "gift": {
                    "description": "Description of the gift.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "customShippingDisabled": {
                    "description": "Status information of custom shipping.<ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "customShippingCost": {
                    "description": "Custom shipping cost for the Product.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "marketPriceDetail": {
                    "description": "Market price of the Product.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "createdAt": {
                    "description": "The date and time when the Product was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the Product was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "metaKeywords": {
                    "description": "Keywords which are visible to search engines like Bing.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "metaDescription": {
                    "description": "The description which is visible to search engines like Google.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "pageTitle": {
                    "description": "Title of the Product page.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "hasOption": {
                    "description": "Shows the Product has a variant or not. (API sets the hasOption value automatically.)<ul class='idea_choice_list'><li> <label>Has variant<\/label>:1<\/li><li> <label>Has no variant<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "shortDetails": {
                    "description": "Short descriptions of the Product. Max 512 characters.",
                    "maxLength": 512,
                    "type": "string",
                    "format": "string"
                },
                "searchKeywords": {
                    "description": "searchKeywords",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "installmentThreshold": {
                    "description": "Specific installment limit for the Product.",
                    "maxLength": 10,
                    "type": "string",
                    "format": "string"
                },
                "homeSortOrder": {
                    "description": "Sort order for the home page showcase.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 99
                },
                "popularSortOrder": {
                    "description": "Sort order for the popular products showcase.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 99
                },
                "brandSortOrder": {
                    "description": "Sort order for the brands showcase.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 9999
                },
                "featuredSortOrder": {
                    "description": "Sort order for the featured products showcase.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 9999
                },
                "campaignedSortOrder": {
                    "description": "Sort order for the campaigned products showcase.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 9999
                },
                "newSortOrder": {
                    "description": "Sort order for the new products showcase.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 9999
                },
                "discountedSortOrder": {
                    "description": "Sort order for the discounted products showcase.",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 9999
                },
                "brand": {
                    "description": "brand",
                    "$ref": "#\/definitions\/Brand"
                },
                "currency": {
                    "description": "currency",
                    "$ref": "#\/definitions\/Currency"
                },
                "parent": {
                    "description": "parent",
                    "$ref": "#\/definitions\/Product"
                },
                "countdown": {
                    "description": "countdown",
                    "$ref": "#\/definitions\/ProductToCountDown"
                },
                "prices": {
                    "description": "prices",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/ProductPrice"
                    }
                },
                "images": {
                    "description": "images",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/ProductImage"
                    }
                },
                "productToCategories": {
                    "description": "productToCategories",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/ProductToCategory"
                    }
                }
            },
            "required": [
                "id",
                "name",
                "fullName",
                "sku",
                "price1",
                "warranty",
                "tax",
                "stockAmount",
                "volumetricWeight",
                "buyingPrice",
                "stockTypeLabel",
                "discount",
                "discountType",
                "moneyOrderDiscount",
                "status",
                "taxIncluded",
                "isGifted",
                "customShippingDisabled",
                "customShippingCost",
                "createdAt",
                "hasOption",
                "homeSortOrder",
                "popularSortOrder",
                "brandSortOrder",
                "featuredSortOrder",
                "campaignedSortOrder",
                "newSortOrder",
                "discountedSortOrder"
            ]
        },
        "ShippingProvider": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ShippingProvider.",
                    "type": "integer",
                    "format": "int32"
                },
                "code": {
                    "description": "The ShippingProvider code. It must be unique.",
                    "maxLength": 64,
                    "type": "string",
                    "format": "string"
                },
                "name": {
                    "description": "The name of the ShippingProvider.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "trackingUrl": {
                    "description": "trackingUrl",
                    "maxLength": 1024,
                    "type": "string",
                    "format": "string"
                },
                "trackingFormMethod": {
                    "description": "trackingFormMethod<ul class='idea_choice_list'><li> <label>get<\/label>:get<\/li><li> <label>post<\/label>:post<\/li><\/ul>",
                    "enum": [
                        "get",
                        "post"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 16
                },
                "payload": {
                    "description": "payload",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "logo": {
                    "description": "logo",
                    "maxLength": 64,
                    "type": "string",
                    "format": "string"
                },
                "resolverClassName": {
                    "description": "resolverClassName",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "settings": {
                    "description": "settings",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/ShippingProviderSetting"
                    }
                }
            },
            "required": [
                "id",
                "code",
                "name",
                "trackingUrl",
                "trackingFormMethod",
                "resolverClassName",
                "createdAt",
                "updatedAt"
            ]
        },
        "ProductToCountDown": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductToCountDown.",
                    "type": "integer",
                    "format": "int32"
                },
                "startDate": {
                    "description": "Start date of the count down for the product.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "endDate": {
                    "description": "End date of the count down for the product.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "expireDate": {
                    "description": "Expire date of the count down for the product.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "useCountDown": {
                    "description": "Determines is the count down enable or disable. <ul class='idea_choice_list'><li> <label>Enable<\/label>:1<\/li><li> <label>Disable<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id",
                "startDate",
                "endDate",
                "expireDate",
                "useCountDown"
            ]
        },
        "ShippingCompany": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ShippingCompany.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the ShippingCompany.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Determines the state of being active of the ShippingCompany. <ul class='idea_choice_list'><li> <label>Active<\/label>:active<\/li><li> <label>Passive<\/label>:passive<\/li><\/ul>",
                    "enum": [
                        "active",
                        "passive"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 32
                },
                "extraPrice": {
                    "description": "Fixed fee\/price for this ShippingCompany.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "extraVolumetricWeightPrice": {
                    "description": "Extra fee\/price per extra volumetric weight.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "freeShipmentOrderPrice": {
                    "description": "The minimum order price for free shipment.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "freeShipmentVolumetricWeightLimit": {
                    "description": "The maximum volumetric weight limit for free shipment.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "sortOrder": {
                    "description": "Sorting value of the ShippingCompany. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int32"
                },
                "companyCode": {
                    "description": "API generates and uses the companyCode automatically.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "paymentType": {
                    "description": "Payment type of the ShippingCompany. <ul class='idea_choice_list'><li> <label>Cash on delivery<\/label>:cash_on_delivery<\/li><li> <label>Standart delivery<\/label>:standart_delivery<\/li><li> <label>Not applicable<\/label>:not_applicable<\/li><\/ul><ul class='idea_choice_list'><li> <label>cash_on_delivery<\/label>:cash_on_delivery<\/li><li> <label>standart_delivery<\/label>:standart_delivery<\/li><li> <label>not_applicable<\/label>:not_applicable<\/li><\/ul>",
                    "enum": [
                        "cash_on_delivery",
                        "standart_delivery",
                        "not_applicable"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 64
                },
                "shippingProvider": {
                    "description": "shippingProvider",
                    "$ref": "#\/definitions\/ShippingProvider"
                }
            },
            "required": [
                "id",
                "name",
                "status",
                "extraPrice",
                "extraVolumetricWeightPrice",
                "freeShipmentOrderPrice",
                "freeShipmentVolumetricWeightLimit",
                "sortOrder",
                "paymentType",
                "createdAt",
                "updatedAt"
            ]
        },
        "SelectionGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the SelectionGroup.",
                    "type": "integer",
                    "format": "int32"
                },
                "title": {
                    "description": "Title of the SelectionGroup",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the SelectionGroup. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "required": [
                "id",
                "title"
            ]
        },
        "MaillistGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the MaillistGroup.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the MaillistGroup.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "name"
            ]
        },
        "SpecName": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the SpecName.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Spec.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "choiceType": {
                    "description": "choiceType<ul class='idea_choice_list'><li> <label>singular<\/label>:singular<\/li><li> <label>plural<\/label>:plural<\/li><\/ul>",
                    "maxLength": 255,
                    "enum": [
                        "singular",
                        "plural"
                    ],
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                  "description": "Sorting value of the SpecName. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 999
                },
                "status": {
                    "description": "Determines the state of being active of the SpecName. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "specGroup": {
                    "description": "specGroup",
                    "$ref": "#\/definitions\/SpecGroup"
                }
            },
            "required": [
                "id",
                "name",
                "choiceType",
                "sortOrder",
                "status"
            ]
        },
        "Cart": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Cart.",
                    "type": "integer",
                    "format": "int32"
                },
                "sessionId": {
                    "description": "The unique ID code which determines the last login of the user.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "locked": {
                    "description": "Locking status of the Cart. If status is locked, no item can be added or be removed.<ul class='idea_choice_list'><li> <label>locked<\/label>:1<\/li><li> <label>Unlocked<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "createdAt": {
                  "description": "The date and time when the Cart was created.",
                  "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the Cart was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "chosenPromotion": {
                    "description": "chosenPromotion",
                    "$ref": "#\/definitions\/ShopCampaigns"
                },
                "member": {
                    "description": "member",
                    "$ref": "#\/definitions\/Member"
                },
                "chosenToken": {
                    "description": "chosenToken",
                    "$ref": "#\/definitions\/ShopTokens"
                },
                "items": {
                    "description": "items",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/CartItem"
                    }
                }
            },
            "required": [
                "id",
                "sessionId",
                "locked",
                "createdAt",
                "updatedAt"
            ]
        },
        "Location": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Location.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Location.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Determines the state of being active of the Location. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "predefined": {
                    "description": "Determines is the Location predefined or not. <ul class='idea_choice_list'><li> <label>Predefined<\/label>:1<\/li><li> <label>New location<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "country": {
                    "description": "country",
                    "$ref": "#\/definitions\/Country"
                },
                "region": {
                    "description": "region",
                    "$ref": "#\/definitions\/Region"
                }
            },
            "required": [
                "id",
                "name",
                "status",
                "predefined",
                "createdAt",
                "updatedAt"
            ]
        },
        "Member": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Member.",
                    "type": "integer",
                    "format": "int32"
                },
                "firstname": {
                    "description": "Firstname of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "surname": {
                    "description": "Surname of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "email": {
                    "description": "E-mail address of the member.",
                    "maxLength": 255,
                    "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                    "type": "string",
                    "format": "string"
                },
                "gender": {
                    "description": "Gender information of the member.<ul class='idea_choice_list'><li> <label>male<\/label>:male<\/li><li> <label>female<\/label>:female<\/li><\/ul><ul class='idea_choice_list'><li> <label>male<\/label>:male<\/li><li> <label>female<\/label>:female<\/li><\/ul>",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 32
                },
                "birthDate": {
                    "description": "Birth date of the member.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "phoneNumber": {
                    "description": "Phone number of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "mobilePhoneNumber": {
                    "description": "Mobile phone number of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "otherLocation": {
                    "description": "Other location of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "address": {
                    "description": "Address information of the member.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "taxNumber": {
                    "description": "Tax number of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "tcId": {
                    "description": "Citizenship number of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Status infromation of the member.<ul class='idea_choice_list'><li> <label>queue<\/label>:queue<\/li><li> <label>active<\/label>:active<\/li><li> <label>passive<\/label>:passive<\/li><li> <label>suspended<\/label>:suspended<\/li><\/ul><ul class='idea_choice_list'><li> <label>queue<\/label>:queue<\/li><li> <label>active<\/label>:active<\/li><li> <label>passive<\/label>:passive<\/li><li> <label>suspended<\/label>:suspended<\/li><\/ul>",
                    "enum": [
                        "queue",
                        "active",
                        "passive",
                        "suspended"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "lastLoginDate": {
                    "description": "Last login date of the member.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "createdAt": {
                    "description": "The date and time when the Member was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the Member was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "zipCode": {
                    "description": "Zip code of the member.",
                    "maxLength": 50,
                    "type": "string",
                    "format": "string"
                },
                "commercialName": {
                    "description": "Commercial name of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "taxOffice": {
                    "description": "Tax office of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "lastMailSentDate": {
                    "description": "Last mail sent date to the member.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "lastIp": {
                    "description": "Last logged in IP address of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "gainedPointAmount": {
                    "description": "Gained point amount of the member.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "spentPointAmount": {
                    "description": "Spent point amount of the member.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "allowedToCampaigns": {
                    "description": "'1' allowed to campaigns, '0' have not allowed to campaigns.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "referredMemberGainedPointAmount": {
                    "description": "Gained point amount from the member referring.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "district": {
                    "description": "District information of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "deviceType": {
                    "description": "Device type information of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "deviceInfo": {
                    "description": "Member's device information.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "country": {
                    "description": "Country information of the member.",
                    "$ref": "#\/definitions\/Country"
                },
                "location": {
                    "description": "Location",
                    "$ref": "#\/definitions\/Location"
                },
                "memberGroup": {
                    "description": "memberGroup",
                    "$ref": "#\/definitions\/MemberGroup"
                },
                "referredMember": {
                    "description": "referredMember",
                    "$ref": "#\/definitions\/Member"
                }
            },
            "required": [
                "id",
                "firstname",
                "surname",
                "email",
                "password",
                "status",
                "createdAt",
                "updatedAt",
                "gainedPointAmount",
                "spentPointAmount",
                "allowedToCampaigns",
                "referredMemberGainedPointAmount",
                "deviceType"
            ]
        },
        "Options": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Options.",
                    "type": "integer",
                    "format": "int32"
                },
                "title": {
                    "description": "Title of the Option. For example, if the optionGroup is 'Colour', then the title of the Options can be 'Red'.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the Options. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 9999
                },
                "logo": {
                    "description": "Path of the logo image of the Option.<ul class='idea_choice_list'><li> <label>jpg<\/label>:jpg<\/li><li> <label>png<\/label>:png<\/li><li> <label>gif<\/label>:gif<\/li><li> <label>jpeg<\/label>:jpeg<\/li><\/ul><ul class='idea_choice_list'><li> <label>jpg<\/label>:jpg<\/li><li> <label>png<\/label>:png<\/li><li> <label>gif<\/label>:gif<\/li><li> <label>jpeg<\/label>:jpeg<\/li><\/ul>",
                    "enum": [
                        "jpg",
                        "png",
                        "gif",
                        "jpeg"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "optionGroup": {
                    "description": "optionGroup",
                    "$ref": "#\/definitions\/OptionGroup"
                }
            },
            "required": [
                "id",
                "title",
                "sortOrder"
            ]
        },
        "OrderItem": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the OrderItem.",
                    "type": "integer",
                    "format": "int32"
                },
                "productName": {
                    "description": "Name of the product.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "productSku": {
                    "description": "SKU of the product.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "productBarcode": {
                    "description": "Barcode of the product.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "productPrice": {
                    "description": "Price value of the product.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "productCurrency": {
                    "description": "Currency type of the product.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "productQuantity": {
                    "description": "Quantity information of the product.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0.001
                },
                "productTax": {
                    "description": "Tax value of the product.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0
                },
                "productDiscount": {
                    "description": "Standard discount value of the product.",
                    "type": "number",
                    "format": "float"
                },
                "productMoneyOrderDiscount": {
                    "description": "Money order discount value of the product.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "productWeight": {
                    "description": "Weight of the product.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "productStockTypeLabel": {
                    "description": "Stock type of the product.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "isProductPromotioned": {
                    "description": "Determines is the product promotioned or not. <ul class='idea_choice_list'><li> <label>Promotioned<\/label>:1<\/li><li> <label>Not promotioned<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "discount": {
                    "description": "ShopToken (gift card) discount of the OrderItem.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "order": {
                    "description": "order",
                    "$ref": "#\/definitions\/Order"
                }
            },
            "required": [
                "id",
                "productName",
                "productSku",
                "productPrice",
                "productCurrency",
                "productQuantity",
                "productTax",
                "productDiscount",
                "productMoneyOrderDiscount",
                "productWeight",
                "productStockTypeLabel",
                "isProductPromotioned",
                "discount",
                "maxInstallment",
                "createdAt",
                "updatedAt"
            ]
        },
        "ProductToCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductToCategory relationship.",
                    "type": "integer",
                    "format": "int32"
                },
                "sortOrder": {
                    "description": "Sorting value of the ProductToCategory relationship. '1' for the first place of the sorting list, '9999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 9999
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                },
                "category": {
                    "description": "category",
                    "$ref": "#\/definitions\/Category"
                }
            },
            "required": [
                "id",
                "sortOrder"
            ]
        },
        "Category": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Category.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Category.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "slug": {
                    "description": "Slug is the descriptive parameter of the Category which is shown on url. For example, 'STORENAME.myideasoft.com/kategori/example-slug'. Default value of this parameter is the name of the current Category.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the Category. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 999
                },
                "status": {
                    "description": "Determines the state of being active of the Category. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "distributorCode": {
                    "description": "Always null. Not useful in the practice.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "percent": {
                    "description": "Price ratio of the Category.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "imageFile": {
                    "description": "The path of the Category Image File. (Valid image types are .JPG, .PNG, .GIF)",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "distributor": {
                    "description": "Always null. Not useful in the practice.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "displayShowcaseContent": {
                    "description": "Display status of the Category's showcase content. <ul class='idea_choice_list'><li> <label>Display<\/label>:1<\/li><li> <label>Non-Display<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "showcaseContent": {
                    "description": "The top content of the Category page which is editable through admin panel.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "showcaseContentDisplayType": {
                    "description": "Display type of the Category's showcase content. <ul class='idea_choice_list'><li> <label>Category content<\/label>:1<\/li><li> <label>Category and parent content<\/label>:2<\/li><li> <label>Category and all parents content<\/label>:3<\/li><\/ul>",
                    "type": "integer",
                    "format": "int32"
                },
                "hasChildren": {
                    "description": "Determines Category has child or not. API generates automatically. <ul class='idea_choice_list'><li> <label>Has child<\/label>:1<\/li><li> <label>Has no child<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "metaKeywords": {
                    "description": "Keywords which are visible to search engines like Bing.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "metaDescription": {
                    "description": "The description which is visible to search engines like Google.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "pageTitle": {
                    "description": "Title of the Category page.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "leftIndex": {
                    "description": "leftIndex helps to create the category schema. API generates and uses automatically.",
                    "type": "integer",
                    "format": "int32"
                },
                "level": {
                    "description": "Determines the depth level of the category object on the category schema. API generates and uses automatically.",
                    "type": "integer",
                    "format": "int32"
                },
                "rightIndex": {
                    "description": "rightIndex helps to create the category schema. API generates and uses automatically.",
                    "type": "integer",
                    "format": "int32"
                },
                "root": {
                    "description": "Determines the root of the category object on the category schema. API generates and uses automatically.",
                    "type": "integer",
                    "format": "int32"
                },
                "parent": {
                    "description": "parent",
                    "$ref": "#\/definitions\/Category"
                },
                "createdAt": {
                    "description": "The date and time when the Category was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the Category was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                }
            },
            "required": [
                "id",
                "name",
                "sortOrder",
                "status",
                "distributorCode",
                "percent",
                "displayShowcaseContent",
                "showcaseContentDisplayType",
                "hasChildren",
                "leftIndex",
                "level",
                "rightIndex",
                "root",
                "createdAt"
            ]
        },
        "SelectionToProduct": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the SelectionToProduct.",
                    "type": "integer",
                    "format": "int32"
                },
                "selection": {
                    "description": "selection",
                    "$ref": "#\/definitions\/Selection"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id"
            ]
        },
        "ExtraInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ExtraInfo.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the ExtraInfo.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the ExtraInfo. '1' for the first place of the sorting list, '99' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 99
                }
            },
            "required": [
                "id",
                "name",
                "sortOrder"
            ]
        },
        "ProductImage": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductImage.",
                    "type": "integer",
                    "format": "int32"
                },
                "filename": {
                    "description": "Filename of the ProductImage.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "extension": {
                    "description": "Extension type of the ProductImage. <ul class='idea_choice_list'><li> <label>JPG<\/label>:jpg<\/li><li> <label>PNG<\/label>:png<\/li><li> <label>GIF<\/label>:gif<\/li><li> <label>JPEG<\/label>:jpeg<\/li><\/ul><ul class='idea_choice_list'><li> <label>jpg<\/label>:jpg<\/li><li> <label>png<\/label>:png<\/li><li> <label>gif<\/label>:gif<\/li><li> <label>jpeg<\/label>:jpeg<\/li><\/ul>",
                    "enum": [
                        "jpg",
                        "png",
                        "gif",
                        "jpeg"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 10
                },
                "directoryName": {
                    "description": "Directory name of the ProductImage. API generates this name automatically.",
                    "maxLength": 10,
                    "type": "string",
                    "format": "string"
                },
                "revision": {
                    "description": "Revision value of the ProductImage.",
                    "maxLength": 30,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the ProductImage. '1' for the first place of the sorting list, '8' for the last place of the sorting list.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 8,
                    "format": "int32"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id",
                "filename",
                "extension",
                "revision",
                "sortOrder"
            ]
        },
        "TownGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the TownGroup.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the TownGroup.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                  "description": "Determines the state of being active of the TownGroup. <ul class='idea_choice_list'><li> <label>Active<\/label>:true<\/li><li> <label>Passive<\/label>:false<\/li><\/ul>",
                    "maxLength": 255,
                    "type": "boolean",
                    "format": "boolean"
                }
            },
            "required": [
                "id",
                "name",
                "status"
            ]
        },
        "OptionGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the OptionGroup.",
                    "type": "integer",
                    "format": "int32"
                },
                "title": {
                    "description": "Title of the OptionGroup. For example, if the Option is 'Red', then the OptionGroup title can be 'Colour'.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                    "description": "Sorting value of the OptionGroup. '1' for the first place of the sorting list, '9999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 9999
                },
                "filterStatus": {
                    "description": "The display status on the filter menu. <ul class='idea_choice_list'><li> <label>Display<\/label>:1<\/li><li> <label>Non-Display<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                }
            },
            "required": [
                "id",
                "title",
                "sortOrder",
                "predefined"
            ]
        },
        "ShopPreference": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ShopPreference.",
                    "type": "integer",
                    "format": "int32"
                },
                "varKey": {
                    "description": "Variable key for the ShopPreference.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "varValue": {
                    "description": "Variable value for the ShopPreference.",
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "varKey",
                "varValue"
            ]
        },
        "BillingAddress": {
            "allOf": [
                {
                    "$ref": "#\/definitions\/OrderAddress"
                }
            ],
            "type": "object",
            "properties": {
                "invoiceType": {
                    "description": "Defines the type of invoice.<ul class='idea_choice_list'><li> <label>individual<\/label>:individual<\/li><li> <label>corporate<\/label>:corporate<\/li><\/ul><ul class='idea_choice_list'><li> <label>individual<\/label>:individual<\/li><li> <label>corporate<\/label>:corporate<\/li><\/ul>",
                    "type": "string",
                    "format": "string",
                    "enum": [
                        "individual",
                        "corporate"
                    ],
                    "maxLength": 32
                },
                "taxNo": {
                    "description": "Tax no for the bill.",
                    "maxLength": 64,
                    "type": "string",
                    "format": "string"
                },
                "taxOffice": {
                    "description": "Tax office of the bill.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "identityRegistrationNumber": {
                    "description": "Identity Registration Number of the customer.",
                    "minLength": 11,
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "OrderDetail": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the OrderDetail.",
                    "type": "integer",
                    "format": "int32"
                },
                "varKey": {
                    "description": "Variable key for the OrderDetail.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "varValue": {
                    "description": "Variable value for the OrderDetail.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "order": {
                    "description": "order",
                    "$ref": "#\/definitions\/Order"
                }
            },
            "required": [
                "id",
                "varKey",
                "varValue"
            ]
        },
        "FavouritedProduct": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the FavouritedProduct.",
                    "type": "integer",
                    "format": "int32"
                },
                "member": {
                    "description": "member",
                    "$ref": "#\/definitions\/Member"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id"
            ]
        },
        "ProductToTag": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ProductToTag.",
                    "type": "integer",
                    "format": "int32"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                },
                "tag": {
                    "description": "tag",
                    "$ref": "#\/definitions\/Tag"
                }
            },
            "required": [
                "id"
            ]
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the User.",
                    "type": "integer",
                    "format": "int32"
                },
                "firstname": {
                    "description": "First name of the user.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "surname": {
                    "description": "Surname of the user.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "email": {
                    "description": "E-mail address of the user.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "username": {
                    "description": "Username of the user.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "phoneNumber": {
                    "description": "Phone number of the user.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Status information of the user.<ul class='idea_choice_list'><li> <label>Passive User<\/label>:0<\/li><li> <label>Active User<\/label>:1<\/li><li> <label>Suspended User<\/label>:2<\/li><\/ul><ul class='idea_choice_list'><li> <label>0<\/label>:0<\/li><li> <label>1<\/label>:1<\/li><li> <label>2<\/label>:2<\/li><\/ul>",
                    "enum": [
                        "0",
                        "1",
                        "2"
                    ],
                    "type": "integer",
                    "format": "int32"
                },
                "createdAt": {
                    "description": "The date and time when the User was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the User was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "isOwner": {
                    "description": "isOwner",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "membergroups": {
                    "description": "membergroups",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/MemberGroup"
                    }
                },
                "smsApproved": {
                    "description": "'1' for sms approved, '0' for sms has not appreved.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "userlevel": {
                    "description": "userlevel",
                    "$ref": "#\/definitions\/ShopUserlevels"
                }
            },
            "required": [
                "id",
                "email",
                "username",
                "password",
                "status",
                "createdAt",
                "updatedAt",
                "isCustomerRepresentative",
                "isOwner",
                "resetPasswordHash",
                "hasChanged",
                "smsApproved"
            ]
        },
        "QuickCart": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the QuickCart.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the QuickCart.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "url": {
                    "description": "Full\/long URL of the QuickCart.",
                    "maxLength": 2048,
                    "type": "string",
                    "format": "string"
                },
                "shortUrl": {
                    "description": "Short URL of the QuickCart.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "name",
                "url",
                "createdAt",
                "updatedAt"
            ]
        },
        "DistributorToProduct": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the DistributorToProduct relationship.",
                    "type": "integer",
                    "format": "int32"
                },
                "distributor": {
                    "description": "The description of the Distributor.",
                    "$ref": "#\/definitions\/Distributor"
                },
                "product": {
                    "description": "The description of the Product.",
                    "$ref": "#\/definitions\/Product"
                }
            },
            "required": [
                "id"
            ]
        },
        "Currency": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Currency.",
                    "type": "integer",
                    "format": "int32"
                },
                "label": {
                    "description": "Label of the Currency",
                    "maxLength": 50,
                    "type": "string",
                    "format": "string"
                },
                "buyingPrice": {
                    "description": "Buying price of the Currency.",
                    "type": "number",
                    "minimum": 0,
                    "format": "float"
                },
                "sellingPrice": {
                    "description": "Selling price of the Currency.",
                    "type": "number",
                    "minimum": 0,
                    "format": "float"
                },
                "abbr": {
                    "description": "Abbreviated name of the currency.",
                    "maxLength": 5,
                    "type": "string",
                    "format": "string"
                },
                "updatedAt": {
                    "description": "The date and time when the Currency was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "status": {
                    "description": "Determines the state of being active of the Currency. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                },
                "isPrimary": {
                    "description": "Determines is the Currency primary or not. <ul class='idea_choice_list'><li> <label>Primary<\/label>:1<\/li><li> <label>Not primary<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                }
            },
            "required": [
                "id"
            ]
        },
        "SpecGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the SpecGroup.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the SpecGroup.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "sortOrder": {
                  "description": "Sorting value of the SpecGroup. '1' for the first place of the sorting list, '999' for the last place of the sorting list.",
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "maximum": 999
                },
                "status": {
                    "description": "Determines the state of being active of the SpecGroup. <ul class='idea_choice_list'><li> <label>Active<\/label>:1<\/li><li> <label>Passive<\/label>:0<\/li><\/ul>",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                }
            },
            "required": [
                "id",
                "name",
                "sortOrder",
                "status"
            ]
        },
        "ShippingAddress": {
            "allOf": [
                {
                    "$ref": "#\/definitions\/OrderAddress"
                }
            ],
            "type": "object"
        },
        "CartItem": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the CartItem.",
                    "type": "integer",
                    "format": "int32"
                },
                "parentProductId": {
                    "description": "Id value of parent product.",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int32"
                },
                "quantity": {
                    "description": "Number of the CartItem in the Cart.",
                    "type": "number",
                    "minimum": 0,
                    "format": "float"
                },
                "categoryId": {
                    "description": "Id value of the CartItem\/Product",
                    "type": "integer",
                    "minimum": 0,
                    "format": "int32"
                },
                "createdAt": {
                    "description": "The date and time when the CartItem was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the CartItem was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "cart": {
                    "description": "cart",
                    "$ref": "#\/definitions\/Cart"
                },
                "product": {
                    "description": "product",
                    "$ref": "#\/definitions\/Product"
                },
                "attributes": {
                    "description": "attributes",
                    "type": "array",
                    "items": {
                        "$ref": "#\/definitions\/CartItemAttribute"
                    }
                }
            },
            "required": [
                "id",
                "quantity",
                "createdAt",
                "updatedAt"
            ]
        },
        "OrderRefundRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the OrderRefundRequest.",
                    "type": "integer",
                    "format": "int32"
                },
                "code": {
                    "description": "An unique code for the OrderRefundRequest which helps the shop owner and customer to follow the refund request.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Status information of the OrderRefundRequest. <ul class='idea_choice_list'><li> <label>Approved<\/label>:approved<\/li><li> <label>Waiting for approval<\/label>:waiting_for_approval<\/li><li> <label>Cancelled<\/label>:cancelled<\/li><\/ul><ul class='idea_choice_list'><li> <label>approved<\/label>:approved<\/li><li> <label>waiting_for_approval<\/label>:waiting_for_approval<\/li><li> <label>cancelled<\/label>:cancelled<\/li><\/ul>",
                    "enum": [
                        "approved",
                        "waiting_for_approval",
                        "cancelled"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "fee": {
                    "description": "The fee value which will paid to the customer.",
                    "type": "number",
                    "minimum": 0,
                    "format": "float"
                },
                "cancellationReason": {
                    "description": "Detailed information of cancellation of the OrderRefundRequest.",
                    "maxLength": 512,
                    "type": "string",
                    "format": "string"
                },
                "createdAt": {
                    "description": "The date and time when the OrderRefundRequest was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                  "description": "The date and time when the OrderRefundRequest was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "member": {
                    "description": "member",
                    "$ref": "#\/definitions\/Member"
                },
                "order": {
                    "description": "order",
                    "$ref": "#\/definitions\/Order"
                }
            },
            "required": [
                "id",
                "code",
                "status",
                "fee",
                "createdAt",
                "updatedAt"
            ]
        },
        "Payment": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Payment.",
                    "type": "integer",
                    "format": "int32"
                },
                "memberFirstname": {
                    "description": "First name of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "memberSurname": {
                    "description": "Surname of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "memberEmail": {
                    "description": "E-mail address of the Member.",
                    "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "memberPhone": {
                    "description": "Phone number of the member.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "paymentTypeName": {
                    "description": "Payment type.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "paymentProviderCode": {
                    "description": "Payment provider code. This code must be valid\/predefined.",
                    "maxLength": 64,
                    "type": "string",
                    "format": "string"
                },
                "paymentProviderName": {
                    "description": "Payment provider name. This name must be valid\/predefined.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "paymentGatewayName": {
                    "description": "Payment gateway name. This name must be valid\/predefined.",
                    "maxLength": 128,
                    "type": "string",
                    "format": "string"
                },
                "paymentGatewayCode": {
                    "description": "Payment gateway code. This code must be valid\/predefined.",
                    "maxLength": 64,
                    "type": "string",
                    "format": "string"
                },
                "bankName": {
                    "description": "Bank name of the Payment.",
                    "maxLength": 64,
                    "type": "string",
                    "format": "string"
                },
                "deviceType": {
                    "description": "deviceType<ul class='idea_choice_list'><li> <label>desktop<\/label>:desktop<\/li><li> <label>mobile<\/label>:mobile<\/li><li> <label>tablet<\/label>:tablet<\/li><\/ul>",
                    "enum": [
                        "desktop",
                        "mobile",
                        "tablet"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 32
                },
                "clientIp": {
                    "description": "The customer's clientIP address.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "currencyRates": {
                    "description": "Selected currency of the Payment.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "amount": {
                    "description": "Pure amount of the Payment.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "finalAmount": {
                    "description": "Final amount of the Payment.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "sumOfGainedPoints": {
                    "description": "Total of gained points from the Payment.",
                    "type": "number",
                    "format": "float",
                    "minimum": 0
                },
                "installment": {
                    "description": "Standard installment amount of the Payment.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 12,
                    "format": "int32"
                },
                "installmentRate": {
                    "description": "Installment rate (delay interest) of the Payment.",
                    "type": "number",
                    "format": "float"
                },
                "extraInstallment": {
                    "description": "Extra installment rate of the Payment.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 12,
                    "format": "int32"
                },
                "currency": {
                    "description": "Selected currency of the Payment.",
                    "maxLength": 32,
                    "type": "string",
                    "format": "string"
                },
                "transactionId": {
                    "description": "Transaction Id of the Payment.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "memberNote": {
                    "description": "Member\/customer note of the Payment.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "userNote": {
                    "description": "User\/admin note of the Payment.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "Status information of the Payment.<ul class='idea_choice_list'><li> <label>deleted<\/label>:deleted<\/li><li> <label>waiting_for_approval<\/label>:waiting_for_approval<\/li><li> <label>approved<\/label>:approved<\/li><li> <label>fulfilled<\/label>:fulfilled<\/li><li> <label>cancelled<\/label>:cancelled<\/li><li> <label>delivered<\/label>:delivered<\/li><li> <label>on_accumulation<\/label>:on_accumulation<\/li><li> <label>waiting_for_payment<\/label>:waiting_for_payment<\/li><li> <label>being_prepared<\/label>:being_prepared<\/li><li> <label>refunded<\/label>:refunded<\/li><li> <label>personal_status_1<\/label>:personal_status_1<\/li><li> <label>personal_status_2<\/label>:personal_status_2<\/li><li> <label>personal_status_3<\/label>:personal_status_3<\/li><li> <label>failed<\/label>:failed<\/li><li> <label>in_transaction<\/label>:in_transaction<\/li><\/ul><ul class='idea_choice_list'><li> <label>deleted<\/label>:deleted<\/li><li> <label>waiting_for_approval<\/label>:waiting_for_approval<\/li><li> <label>approved<\/label>:approved<\/li><li> <label>fulfilled<\/label>:fulfilled<\/li><li> <label>cancelled<\/label>:cancelled<\/li><li> <label>delivered<\/label>:delivered<\/li><li> <label>on_accumulation<\/label>:on_accumulation<\/li><li> <label>waiting_for_payment<\/label>:waiting_for_payment<\/li><li> <label>being_prepared<\/label>:being_prepared<\/li><li> <label>refunded<\/label>:refunded<\/li><li> <label>personal_status_1<\/label>:personal_status_1<\/li><li> <label>personal_status_2<\/label>:personal_status_2<\/li><li> <label>personal_status_3<\/label>:personal_status_3<\/li><li> <label>failed<\/label>:failed<\/li><li> <label>in_transaction<\/label>:in_transaction<\/li><\/ul>",
                    "enum": [
                        "deleted",
                        "waiting_for_approval",
                        "approved",
                        "fulfilled",
                        "cancelled",
                        "delivered",
                        "on_accumulation",
                        "waiting_for_payment",
                        "being_prepared",
                        "refunded",
                        "personal_status_1",
                        "personal_status_2",
                        "personal_status_3",
                        "failed",
                        "in_transaction"
                    ],
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "errorMessage": {
                    "description": "Payment error message.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "member": {
                    "description": "member",
                    "$ref": "#\/definitions\/Member"
                }
            },
            "required": [
                "id",
                "memberFirstname",
                "memberSurname",
                "memberEmail",
                "paymentTypeName",
                "paymentProviderCode",
                "paymentProviderName",
                "paymentGatewayName",
                "paymentGatewayCode",
                "bankName",
                "deviceType",
                "clientIp",
                "currencyRates",
                "amount",
                "finalAmount",
                "sumOfGainedPoints",
                "installment",
                "installmentRate",
                "extraInstallment",
                "currency",
                "status",
                "createdAt",
                "updatedAt"
            ]
        },
        "Maillist": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Maillist.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Maillist.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "email": {
                    "description": "E-mail of the user. User can be a member or a quest.",
                    "maxLength": 255,
                    "pattern": "\/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$\/",
                    "type": "string",
                    "format": "string"
                },
                "lastMailSentDate": {
                    "description": "Last mail sent date.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "creatorIpAddress": {
                    "description": "The creator Ip address of the Maillist.",
                    "pattern": "\/^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\/",
                    "maxLength": 64,
                    "type": "string",
                    "format": "string"
                },
                "createdAt": {
                    "description": "The date and time when the Maillist was created.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "updatedAt": {
                    "description": "The date and time when the Maillist was last modified.",
                    "type": "string",
                    "format": "date-time",
                    "pattern": "\/^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$\/"
                },
                "maillistGroup": {
                    "description": "maillistGroup",
                    "$ref": "#\/definitions\/MaillistGroup"
                }
            },
            "required": [
                "id",
                "name",
                "email",
                "createdAt",
                "updatedAt"
            ]
        },
        "PaymentType": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the PaymentType.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the PaymentType.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "name",
                "status",
                "sortOrder"
            ]
        },
        "ShopCampaigns": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ShopCampaigns.",
                    "type": "integer",
                    "format": "int32"
                },
                "label": {
                    "description": "Label of the ShopCampaigns.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                }
            },
            "required": [
                "id",
                "label",
                "startDate",
                "endDate",
                "selecteddate",
                "maxusage",
                "currentusage",
                "mainType",
                "currencyid",
                "basePrice",
                "basecategoryid",
                "basecategorytree",
                "basebrandid",
                "baseProducts",
                "baseproductsoperator",
                "baseCount",
                "membersid",
                "membergroupid",
                "promotionType",
                "promotionValue",
                "affectedcount",
                "uselabel",
                "status"
            ]
        },
        "PaymentProviderSetting": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the PaymentProviderSetting.",
                    "type": "integer",
                    "format": "int32"
                },
                "varKey": {
                    "description": "Variable key for the PaymentProviderSetting",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "varValue": {
                    "description": "Variable value for the PaymentProviderSetting",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "paymentProvider": {
                    "description": "paymentProvider",
                    "$ref": "#\/definitions\/PaymentProvider"
                }
            },
            "required": [
                "id",
                "varKey",
                "varValue"
            ]
        },
        "PaymentGatewaySetting": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the PaymentGatewaySetting.",
                    "type": "integer",
                    "format": "int32"
                },
                "varKey": {
                    "description": "Variable key for the PaymentGatewaySetting.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "varValue": {
                    "description": "Variable value for the PaymentGatewaySetting.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "paymentGateway": {
                    "description": "paymentGateway",
                    "$ref": "#\/definitions\/PaymentGateway"
                }
            },
            "required": [
                "id",
                "varKey",
                "varValue"
            ]
        },
        "Country": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the Country.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the Country.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "status": {
                    "description": "'1' Country active, '0' Country passive.",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1
                }
            },
            "required": [
                "id",
                "name",
                "status",
                "extraShippingPrice"
            ]
        },
        "MemberAddress": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "id",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "required": [
                "id",
                "name",
                "type",
                "firstname",
                "surname",
                "address",
                "phoneNumber",
                "mobilePhoneNumber",
                "invoiceType",
                "isEinvoiceUser",
                "createdAt",
                "updatedAt"
            ]
        },
        "Midblock": {
            "type": "object",
            "properties": [

            ],
            "required": [
                "id",
                "name",
                "status",
                "sortOrder",
                "productCountPerRow"
            ]
        },
        "ShippingProviderSetting": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ShippingProviderSetting.",
                    "type": "integer",
                    "format": "int32"
                },
                "varKey": {
                    "description": "Variable key for the ShippingProviderSetting.",
                    "maxLength": 255,
                    "type": "string",
                    "format": "string"
                },
                "varValue": {
                    "description": "Variable value for the ShippingProviderSetting.",
                    "maxLength": 65535,
                    "type": "string",
                    "format": "string"
                },
                "shippingProvider": {
                    "description": "shippingProvider",
                    "$ref": "#\/definitions\/ShippingProvider"
                }
            },
            "required": [
                "id",
                "varKey",
                "varValue"
            ]
        },
        "ShopTokens": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the ShopTokens.",
                    "type": "integer",
                    "format": "int32"
                },
                "code": {
                    "description": "The unique code of the ShopToken. It can be modified on admin panel.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                }
            },
            "required": [
                "id",
                "code",
                "maxusage",
                "currentusage",
                "maxusagepermember",
                "membergroupid",
                "startdate",
                "expiredate",
                "minimumusagelimit",
                "createdAt",
                "valuetype",
                "valueeffect",
                "status",
                "cargofree",
                "usediscountproducts",
                "iseffectivespecialtoken"
            ]
        },
        "OrderItemCustomization": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "id",
                    "type": "integer",
                    "format": "int32"
                },
                "productCustomizationGroupId": {
                    "description": "productCustomizationGroupId",
                    "type": "integer",
                    "format": "int32"
                },
                "productCustomizationGroupName": {
                    "description": "productCustomizationGroupName",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "productCustomizationGroupSortOrder": {
                    "description": "productCustomizationGroupSortOrder",
                    "type": "integer",
                    "format": "int32"
                },
                "productCustomizationFieldId": {
                    "description": "productCustomizationFieldId",
                    "type": "integer",
                    "format": "int32"
                },
                "productCustomizationFieldType": {
                    "description": "productCustomizationFieldType",
                    "type": "string",
                    "format": "string",
                    "maxLength": 64
                },
                "productCustomizationFieldName": {
                    "description": "productCustomizationFieldName",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "productCustomizationFieldValue": {
                    "description": "productCustomizationFieldValue",
                    "type": "string",
                    "format": "string",
                    "maxLength": 65535
                },
                "cartItemAttributeId": {
                    "description": "cartItemAttributeId",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "required": [
                "id",
                "productCustomizationFieldId",
                "productCustomizationFieldType",
                "productCustomizationFieldName",
                "productCustomizationFieldSortOrder",
                "productCustomizationFieldValue",
                "cartItemAttributeId",
                "createdAt",
                "updatedAt"
            ]
        },
        "OrderAddress": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the OrderAddress.",
                    "type": "integer",
                    "format": "int32"
                },
                "firstname": {
                    "description": "First name of the customer.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "surname": {
                    "description": "Surname of the customer.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "country": {
                    "description": "Country information of the customer.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 128
                },
                "location": {
                    "description": "Location information of the customer.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 128
                },
                "subLocation": {
                    "description": "SubLocation information of the customer.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 128
                },
                "address": {
                    "description": "Address information of the customer.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 65535
                },
                "phoneNumber": {
                    "description": "Customer phone number.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 32
                },
                "mobilePhoneNumber": {
                    "description": "Customer mobile phone number.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 32
                },
                "order": {
                    "description": "order",
                    "$ref": "#\/definitions\/Order"
                }
            },
            "required": [
                "id",
                "firstname",
                "surname",
                "country",
                "location",
                "address",
                "phoneNumber",
                "createdAt",
                "updatedAt"
            ]
        },
        "ShopUserlevels": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "id",
                    "type": "integer",
                    "format": "int32"
                },
                "label": {
                    "description": "label",
                    "type": "string",
                    "format": "string"
                },
                "roles": {
                    "description": "roles",
                    "type": "string",
                    "format": "string"
                }
            },
            "required": [
                "id",
                "label",
                "roles"
            ]
        },
        "UserLatestData": {
            "type": "object",
            "properties": [

            ],
            "required": [
                "id",
                "varKey",
                "varValue"
            ]
        },
        "CartItemAttribute": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique numeric identifier for the CartItemAttribute.",
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "description": "The name of the CartItemAttribute. For example, if cart item is pants, then 'size' of the pants is the name of CartItemAttribute.",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "value": {
                    "description": "The value of the CartItemAttribute. For example, if cart item is pants, size of the pants is the name of the CartItemAttribute then 'mediumm' or 'small' is the value of CartItemAttribute",
                    "type": "string",
                    "format": "string",
                    "maxLength": 255
                },
                "createdAt": {
                    "description": "The date and time when the CartItemAttribute was created.",
                    "type": "string",
                    "format": "date-time"
                },
                "cartItem": {
                    "description": "cartItem",
                    "$ref": "#\/definitions\/CartItem"
                }
            },
            "required": [
                "id",
                "name",
                "value",
                "createdAt"
            ]
        }
    }
}